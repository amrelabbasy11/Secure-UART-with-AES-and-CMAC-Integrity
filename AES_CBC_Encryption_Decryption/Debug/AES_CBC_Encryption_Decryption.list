
AES_CBC_Encryption_Decryption.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c9c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002140  08004e30  08004e30  00005e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f70  08006f70  00008040  2**0
                  CONTENTS
  4 .ARM          00000008  08006f70  08006f70  00007f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f78  08006f78  00008040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f78  08006f78  00007f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f7c  08006f7c  00007f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08006f80  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000040  08006fc0  00008040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08006fc0  00008308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000848e  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d9  00000000  00000000  000104fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  00011cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054e  00000000  00000000  000123d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b61  00000000  00000000  00012926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a0fa  00000000  00000000  00029487  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a5a2  00000000  00000000  00033581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bdb23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b54  00000000  00000000  000bdb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000bf6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000040 	.word	0x20000040
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004e18 	.word	0x08004e18

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000044 	.word	0x20000044
 80001d0:	08004e18 	.word	0x08004e18

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <MX_GPIO_Init+0x30>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	4a08      	ldr	r2, [pc, #32]	@ (80004f4 <MX_GPIO_Init+0x30>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <MX_GPIO_Init+0x30>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40023800 	.word	0x40023800

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fe:	f000 fa01 	bl	8000904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000502:	f000 f893 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f7ff ffdd 	bl	80004c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f95f 	bl	80007cc <MX_USART2_UART_Init>
    /*  using wolfssl
     * https://www.wolfssl.com/
     * https://www.wolfssl.com/documentation/manuals/wolfssl/group__AES.html
     * */

  EncRet = wc_AesInit(&enc, hint, devId);
 800050e:	4b3c      	ldr	r3, [pc, #240]	@ (8000600 <main+0x108>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a3c      	ldr	r2, [pc, #240]	@ (8000604 <main+0x10c>)
 8000514:	6812      	ldr	r2, [r2, #0]
 8000516:	4619      	mov	r1, r3
 8000518:	483b      	ldr	r0, [pc, #236]	@ (8000608 <main+0x110>)
 800051a:	f004 fc26 	bl	8004d6a <wc_AesInit>
 800051e:	4603      	mov	r3, r0
 8000520:	4a3a      	ldr	r2, [pc, #232]	@ (800060c <main+0x114>)
 8000522:	6013      	str	r3, [r2, #0]
    if(EncRet == 0){
 8000524:	4b39      	ldr	r3, [pc, #228]	@ (800060c <main+0x114>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d167      	bne.n	80005fc <main+0x104>
    	EncRet |= wc_AesSetKey(&enc, AES_key, AES_BLOCK_SIZE, iv, AES_ENCRYPTION);
 800052c:	2300      	movs	r3, #0
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	4b37      	ldr	r3, [pc, #220]	@ (8000610 <main+0x118>)
 8000532:	2210      	movs	r2, #16
 8000534:	4937      	ldr	r1, [pc, #220]	@ (8000614 <main+0x11c>)
 8000536:	4834      	ldr	r0, [pc, #208]	@ (8000608 <main+0x110>)
 8000538:	f004 fb2e 	bl	8004b98 <wc_AesSetKey>
 800053c:	4602      	mov	r2, r0
 800053e:	4b33      	ldr	r3, [pc, #204]	@ (800060c <main+0x114>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4313      	orrs	r3, r2
 8000544:	4a31      	ldr	r2, [pc, #196]	@ (800060c <main+0x114>)
 8000546:	6013      	str	r3, [r2, #0]
    	if(EncRet == 0){
 8000548:	4b30      	ldr	r3, [pc, #192]	@ (800060c <main+0x114>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d109      	bne.n	8000564 <main+0x6c>
    		EncRet |= wc_AesSetIV(&enc, iv);
 8000550:	492f      	ldr	r1, [pc, #188]	@ (8000610 <main+0x118>)
 8000552:	482d      	ldr	r0, [pc, #180]	@ (8000608 <main+0x110>)
 8000554:	f004 fb42 	bl	8004bdc <wc_AesSetIV>
 8000558:	4602      	mov	r2, r0
 800055a:	4b2c      	ldr	r3, [pc, #176]	@ (800060c <main+0x114>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4313      	orrs	r3, r2
 8000560:	4a2a      	ldr	r2, [pc, #168]	@ (800060c <main+0x114>)
 8000562:	6013      	str	r3, [r2, #0]
    	}
			if(EncRet == 0){
 8000564:	4b29      	ldr	r3, [pc, #164]	@ (800060c <main+0x114>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d147      	bne.n	80005fc <main+0x104>
				EncRet = wc_AesCbcEncrypt(&enc, UART_msgCipher, UART_msg, sizeof(UART_msg));
 800056c:	2310      	movs	r3, #16
 800056e:	4a2a      	ldr	r2, [pc, #168]	@ (8000618 <main+0x120>)
 8000570:	492a      	ldr	r1, [pc, #168]	@ (800061c <main+0x124>)
 8000572:	4825      	ldr	r0, [pc, #148]	@ (8000608 <main+0x110>)
 8000574:	f004 fb54 	bl	8004c20 <wc_AesCbcEncrypt>
 8000578:	4603      	mov	r3, r0
 800057a:	4a24      	ldr	r2, [pc, #144]	@ (800060c <main+0x114>)
 800057c:	6013      	str	r3, [r2, #0]
				 if (EncRet == 0){
 800057e:	4b23      	ldr	r3, [pc, #140]	@ (800060c <main+0x114>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d122      	bne.n	80005cc <main+0xd4>
						 EncRet = wc_AesInit(&dec, hint, devId);
 8000586:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <main+0x108>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a1e      	ldr	r2, [pc, #120]	@ (8000604 <main+0x10c>)
 800058c:	6812      	ldr	r2, [r2, #0]
 800058e:	4619      	mov	r1, r3
 8000590:	4823      	ldr	r0, [pc, #140]	@ (8000620 <main+0x128>)
 8000592:	f004 fbea 	bl	8004d6a <wc_AesInit>
 8000596:	4603      	mov	r3, r0
 8000598:	4a1c      	ldr	r2, [pc, #112]	@ (800060c <main+0x114>)
 800059a:	6013      	str	r3, [r2, #0]
						 EncRet |= wc_AesSetKey(&dec, AES_key, AES_BLOCK_SIZE, iv, AES_DECRYPTION);
 800059c:	2301      	movs	r3, #1
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <main+0x118>)
 80005a2:	2210      	movs	r2, #16
 80005a4:	491b      	ldr	r1, [pc, #108]	@ (8000614 <main+0x11c>)
 80005a6:	481e      	ldr	r0, [pc, #120]	@ (8000620 <main+0x128>)
 80005a8:	f004 faf6 	bl	8004b98 <wc_AesSetKey>
 80005ac:	4602      	mov	r2, r0
 80005ae:	4b17      	ldr	r3, [pc, #92]	@ (800060c <main+0x114>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4313      	orrs	r3, r2
 80005b4:	4a15      	ldr	r2, [pc, #84]	@ (800060c <main+0x114>)
 80005b6:	6013      	str	r3, [r2, #0]
						 EncRet |= wc_AesSetIV(&dec, iv);
 80005b8:	4915      	ldr	r1, [pc, #84]	@ (8000610 <main+0x118>)
 80005ba:	4819      	ldr	r0, [pc, #100]	@ (8000620 <main+0x128>)
 80005bc:	f004 fb0e 	bl	8004bdc <wc_AesSetIV>
 80005c0:	4602      	mov	r2, r0
 80005c2:	4b12      	ldr	r3, [pc, #72]	@ (800060c <main+0x114>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4313      	orrs	r3, r2
 80005c8:	4a10      	ldr	r2, [pc, #64]	@ (800060c <main+0x114>)
 80005ca:	6013      	str	r3, [r2, #0]
				 }
					 if (EncRet == 0){
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <main+0x114>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d113      	bne.n	80005fc <main+0x104>
						 EncRet |= wc_AesCbcDecrypt(&dec, UART_msgPlain, UART_msgCipher, sizeof(UART_msgCipher));
 80005d4:	2310      	movs	r3, #16
 80005d6:	4a11      	ldr	r2, [pc, #68]	@ (800061c <main+0x124>)
 80005d8:	4912      	ldr	r1, [pc, #72]	@ (8000624 <main+0x12c>)
 80005da:	4811      	ldr	r0, [pc, #68]	@ (8000620 <main+0x128>)
 80005dc:	f004 fb6b 	bl	8004cb6 <wc_AesCbcDecrypt>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <main+0x114>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	4a08      	ldr	r2, [pc, #32]	@ (800060c <main+0x114>)
 80005ea:	6013      	str	r3, [r2, #0]
							 if (EncRet == 0) {
 80005ec:	4b07      	ldr	r3, [pc, #28]	@ (800060c <main+0x114>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d103      	bne.n	80005fc <main+0x104>
							  DecRet = 1;
 80005f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <main+0x130>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <main+0x104>
 8000600:	20000294 	.word	0x20000294
 8000604:	20000000 	.word	0x20000000
 8000608:	2000005c 	.word	0x2000005c
 800060c:	20000298 	.word	0x20000298
 8000610:	20000014 	.word	0x20000014
 8000614:	20000004 	.word	0x20000004
 8000618:	20000024 	.word	0x20000024
 800061c:	2000029c 	.word	0x2000029c
 8000620:	20000178 	.word	0x20000178
 8000624:	200002ac 	.word	0x200002ac
 8000628:	200002bc 	.word	0x200002bc

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	@ 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	@ 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fbb2 	bl	8004da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b23      	ldr	r3, [pc, #140]	@ (80006e4 <SystemClock_Config+0xb8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <SystemClock_Config+0xb8>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000660:	4b20      	ldr	r3, [pc, #128]	@ (80006e4 <SystemClock_Config+0xb8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <SystemClock_Config+0xbc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000678:	4a1b      	ldr	r2, [pc, #108]	@ (80006e8 <SystemClock_Config+0xbc>)
 800067a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <SystemClock_Config+0xbc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000690:	2301      	movs	r3, #1
 8000692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000694:	2310      	movs	r3, #16
 8000696:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000698:	2300      	movs	r3, #0
 800069a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069c:	f107 0320 	add.w	r3, r7, #32
 80006a0:	4618      	mov	r0, r3
 80006a2:	f000 fc0b 	bl	8000ebc <HAL_RCC_OscConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006ac:	f000 f81e 	bl	80006ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b0:	230f      	movs	r3, #15
 80006b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006b4:	2300      	movs	r3, #0
 80006b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fe6e 	bl	80013ac <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006d6:	f000 f809 	bl	80006ec <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	@ 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000706:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <HAL_MspInit+0x4c>)
 8000708:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070c:	6453      	str	r3, [r2, #68]	@ 0x44
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <HAL_MspInit+0x4c>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000712:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000722:	4a08      	ldr	r2, [pc, #32]	@ (8000744 <HAL_MspInit+0x4c>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	@ 0x40
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_MspInit+0x4c>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40023800 	.word	0x40023800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <NMI_Handler+0x4>

08000750 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <HardFault_Handler+0x4>

08000758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <MemManage_Handler+0x4>

08000760 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <BusFault_Handler+0x4>

08000768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <UsageFault_Handler+0x4>

08000770 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079e:	f000 f903 	bl	80009a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
	...

080007a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <SystemInit+0x20>)
 80007ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007b2:	4a05      	ldr	r2, [pc, #20]	@ (80007c8 <SystemInit+0x20>)
 80007b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d0:	4b11      	ldr	r3, [pc, #68]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_USART2_UART_Init+0x50>)
 80007d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007de:	4b0e      	ldr	r3, [pc, #56]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f2:	220c      	movs	r2, #12
 80007f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f6:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_USART2_UART_Init+0x4c>)
 8000804:	f000 ffb2 	bl	800176c <HAL_UART_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800080e:	f7ff ff6d 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200002c0 	.word	0x200002c0
 800081c:	40004400 	.word	0x40004400

08000820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	@ 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0314 	add.w	r3, r7, #20
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a19      	ldr	r2, [pc, #100]	@ (80008a4 <HAL_UART_MspInit+0x84>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d12b      	bne.n	800089a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	613b      	str	r3, [r7, #16]
 8000846:	4b18      	ldr	r3, [pc, #96]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	4a17      	ldr	r2, [pc, #92]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 800084c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000850:	6413      	str	r3, [r2, #64]	@ 0x40
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a10      	ldr	r2, [pc, #64]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <HAL_UART_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800087a:	230c      	movs	r3, #12
 800087c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800088a:	2307      	movs	r3, #7
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <HAL_UART_MspInit+0x8c>)
 8000896:	f000 f98d 	bl	8000bb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800089a:	bf00      	nop
 800089c:	3728      	adds	r7, #40	@ 0x28
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020000 	.word	0x40020000

080008b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80008b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008b4:	480d      	ldr	r0, [pc, #52]	@ (80008ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008b6:	490e      	ldr	r1, [pc, #56]	@ (80008f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008b8:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008bc:	e002      	b.n	80008c4 <LoopCopyDataInit>

080008be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008c2:	3304      	adds	r3, #4

080008c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c8:	d3f9      	bcc.n	80008be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ca:	4a0b      	ldr	r2, [pc, #44]	@ (80008f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008cc:	4c0b      	ldr	r4, [pc, #44]	@ (80008fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008d0:	e001      	b.n	80008d6 <LoopFillZerobss>

080008d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d4:	3204      	adds	r2, #4

080008d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d8:	d3fb      	bcc.n	80008d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008da:	f7ff ff65 	bl	80007a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008de:	f004 fa69 	bl	8004db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008e2:	f7ff fe09 	bl	80004f8 <main>
  bx  lr    
 80008e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008f0:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80008f4:	08006f80 	.word	0x08006f80
  ldr r2, =_sbss
 80008f8:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80008fc:	20000308 	.word	0x20000308

08000900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000900:	e7fe      	b.n	8000900 <ADC_IRQHandler>
	...

08000904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000908:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <HAL_Init+0x40>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0d      	ldr	r2, [pc, #52]	@ (8000944 <HAL_Init+0x40>)
 800090e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000914:	4b0b      	ldr	r3, [pc, #44]	@ (8000944 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0a      	ldr	r2, [pc, #40]	@ (8000944 <HAL_Init+0x40>)
 800091a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800091e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	4b08      	ldr	r3, [pc, #32]	@ (8000944 <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a07      	ldr	r2, [pc, #28]	@ (8000944 <HAL_Init+0x40>)
 8000926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800092a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092c:	2003      	movs	r0, #3
 800092e:	f000 f90d 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000932:	200f      	movs	r0, #15
 8000934:	f000 f808 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000938:	f7ff fede 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023c00 	.word	0x40023c00

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000950:	4b12      	ldr	r3, [pc, #72]	@ (800099c <HAL_InitTick+0x54>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <HAL_InitTick+0x58>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f917 	bl	8000b9a <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e00e      	b.n	8000994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d80a      	bhi.n	8000992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f000 f8ed 	bl	8000b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000988:	4a06      	ldr	r2, [pc, #24]	@ (80009a4 <HAL_InitTick+0x5c>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000034 	.word	0x20000034
 80009a0:	2000003c 	.word	0x2000003c
 80009a4:	20000038 	.word	0x20000038

080009a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_IncTick+0x20>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_IncTick+0x24>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <HAL_IncTick+0x24>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2000003c 	.word	0x2000003c
 80009cc:	20000304 	.word	0x20000304

080009d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  return uwTick;
 80009d4:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <HAL_GetTick+0x14>)
 80009d6:	681b      	ldr	r3, [r3, #0]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000304 	.word	0x20000304

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	db0a      	blt.n	8000a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	490c      	ldr	r1, [pc, #48]	@ (8000a98 <__NVIC_SetPriority+0x4c>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	0112      	lsls	r2, r2, #4
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	440b      	add	r3, r1
 8000a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a74:	e00a      	b.n	8000a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	b2da      	uxtb	r2, r3
 8000a7a:	4908      	ldr	r1, [pc, #32]	@ (8000a9c <__NVIC_SetPriority+0x50>)
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	f003 030f 	and.w	r3, r3, #15
 8000a82:	3b04      	subs	r3, #4
 8000a84:	0112      	lsls	r2, r2, #4
 8000a86:	b2d2      	uxtb	r2, r2
 8000a88:	440b      	add	r3, r1
 8000a8a:	761a      	strb	r2, [r3, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000e100 	.word	0xe000e100
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b089      	sub	sp, #36	@ 0x24
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	f1c3 0307 	rsb	r3, r3, #7
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	bf28      	it	cs
 8000abe:	2304      	movcs	r3, #4
 8000ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	2b06      	cmp	r3, #6
 8000ac8:	d902      	bls.n	8000ad0 <NVIC_EncodePriority+0x30>
 8000aca:	69fb      	ldr	r3, [r7, #28]
 8000acc:	3b03      	subs	r3, #3
 8000ace:	e000      	b.n	8000ad2 <NVIC_EncodePriority+0x32>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad8:	69bb      	ldr	r3, [r7, #24]
 8000ada:	fa02 f303 	lsl.w	r3, r2, r3
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa01 f303 	lsl.w	r3, r1, r3
 8000af2:	43d9      	mvns	r1, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	4313      	orrs	r3, r2
         );
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3724      	adds	r7, #36	@ 0x24
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b18:	d301      	bcc.n	8000b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e00f      	b.n	8000b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <SysTick_Config+0x40>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b26:	210f      	movs	r1, #15
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	f7ff ff8e 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b30:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <SysTick_Config+0x40>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b36:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SysTick_Config+0x40>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b3c:	2300      	movs	r3, #0
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ff47 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000b5a:	bf00      	nop
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	4603      	mov	r3, r0
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
 8000b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b74:	f7ff ff5c 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b7a:	687a      	ldr	r2, [r7, #4]
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	6978      	ldr	r0, [r7, #20]
 8000b80:	f7ff ff8e 	bl	8000aa0 <NVIC_EncodePriority>
 8000b84:	4602      	mov	r2, r0
 8000b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff5d 	bl	8000a4c <__NVIC_SetPriority>
}
 8000b92:	bf00      	nop
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff ffb0 	bl	8000b08 <SysTick_Config>
 8000ba8:	4603      	mov	r3, r0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	@ 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
 8000bce:	e159      	b.n	8000e84 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	f040 8148 	bne.w	8000e7e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 0303 	and.w	r3, r3, #3
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d005      	beq.n	8000c06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d130      	bne.n	8000c68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	2203      	movs	r2, #3
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	69ba      	ldr	r2, [r7, #24]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	69ba      	ldr	r2, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	091b      	lsrs	r3, r3, #4
 8000c52:	f003 0201 	and.w	r2, r3, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f003 0303 	and.w	r3, r3, #3
 8000c70:	2b03      	cmp	r3, #3
 8000c72:	d017      	beq.n	8000ca4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f003 0303 	and.w	r3, r3, #3
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d123      	bne.n	8000cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	08da      	lsrs	r2, r3, #3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3208      	adds	r2, #8
 8000cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	691a      	ldr	r2, [r3, #16]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f003 0307 	and.w	r3, r3, #7
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	08da      	lsrs	r2, r3, #3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3208      	adds	r2, #8
 8000cf2:	69b9      	ldr	r1, [r7, #24]
 8000cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0203 	and.w	r2, r3, #3
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 80a2 	beq.w	8000e7e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b57      	ldr	r3, [pc, #348]	@ (8000e9c <HAL_GPIO_Init+0x2e8>)
 8000d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d42:	4a56      	ldr	r2, [pc, #344]	@ (8000e9c <HAL_GPIO_Init+0x2e8>)
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d4a:	4b54      	ldr	r3, [pc, #336]	@ (8000e9c <HAL_GPIO_Init+0x2e8>)
 8000d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d56:	4a52      	ldr	r2, [pc, #328]	@ (8000ea0 <HAL_GPIO_Init+0x2ec>)
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	089b      	lsrs	r3, r3, #2
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	220f      	movs	r2, #15
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a49      	ldr	r2, [pc, #292]	@ (8000ea4 <HAL_GPIO_Init+0x2f0>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d019      	beq.n	8000db6 <HAL_GPIO_Init+0x202>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a48      	ldr	r2, [pc, #288]	@ (8000ea8 <HAL_GPIO_Init+0x2f4>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d013      	beq.n	8000db2 <HAL_GPIO_Init+0x1fe>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a47      	ldr	r2, [pc, #284]	@ (8000eac <HAL_GPIO_Init+0x2f8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d00d      	beq.n	8000dae <HAL_GPIO_Init+0x1fa>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a46      	ldr	r2, [pc, #280]	@ (8000eb0 <HAL_GPIO_Init+0x2fc>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d007      	beq.n	8000daa <HAL_GPIO_Init+0x1f6>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a45      	ldr	r2, [pc, #276]	@ (8000eb4 <HAL_GPIO_Init+0x300>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_GPIO_Init+0x1f2>
 8000da2:	2304      	movs	r3, #4
 8000da4:	e008      	b.n	8000db8 <HAL_GPIO_Init+0x204>
 8000da6:	2307      	movs	r3, #7
 8000da8:	e006      	b.n	8000db8 <HAL_GPIO_Init+0x204>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e004      	b.n	8000db8 <HAL_GPIO_Init+0x204>
 8000dae:	2302      	movs	r3, #2
 8000db0:	e002      	b.n	8000db8 <HAL_GPIO_Init+0x204>
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <HAL_GPIO_Init+0x204>
 8000db6:	2300      	movs	r3, #0
 8000db8:	69fa      	ldr	r2, [r7, #28]
 8000dba:	f002 0203 	and.w	r2, r2, #3
 8000dbe:	0092      	lsls	r2, r2, #2
 8000dc0:	4093      	lsls	r3, r2
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc8:	4935      	ldr	r1, [pc, #212]	@ (8000ea0 <HAL_GPIO_Init+0x2ec>)
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	089b      	lsrs	r3, r3, #2
 8000dce:	3302      	adds	r3, #2
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dd6:	4b38      	ldr	r3, [pc, #224]	@ (8000eb8 <HAL_GPIO_Init+0x304>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000dfa:	4a2f      	ldr	r2, [pc, #188]	@ (8000eb8 <HAL_GPIO_Init+0x304>)
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e00:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb8 <HAL_GPIO_Init+0x304>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e24:	4a24      	ldr	r2, [pc, #144]	@ (8000eb8 <HAL_GPIO_Init+0x304>)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e2a:	4b23      	ldr	r3, [pc, #140]	@ (8000eb8 <HAL_GPIO_Init+0x304>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4013      	ands	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8000eb8 <HAL_GPIO_Init+0x304>)
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e54:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <HAL_GPIO_Init+0x304>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e78:	4a0f      	ldr	r2, [pc, #60]	@ (8000eb8 <HAL_GPIO_Init+0x304>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3301      	adds	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	2b0f      	cmp	r3, #15
 8000e88:	f67f aea2 	bls.w	8000bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3724      	adds	r7, #36	@ 0x24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40013800 	.word	0x40013800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	40020800 	.word	0x40020800
 8000eb0:	40020c00 	.word	0x40020c00
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40013c00 	.word	0x40013c00

08000ebc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e267      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d075      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eda:	4b88      	ldr	r3, [pc, #544]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	f003 030c 	and.w	r3, r3, #12
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	d00c      	beq.n	8000f00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ee6:	4b85      	ldr	r3, [pc, #532]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000eee:	2b08      	cmp	r3, #8
 8000ef0:	d112      	bne.n	8000f18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ef2:	4b82      	ldr	r3, [pc, #520]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000efa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000efe:	d10b      	bne.n	8000f18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f00:	4b7e      	ldr	r3, [pc, #504]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d05b      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x108>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d157      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	e242      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f20:	d106      	bne.n	8000f30 <HAL_RCC_OscConfig+0x74>
 8000f22:	4b76      	ldr	r3, [pc, #472]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a75      	ldr	r2, [pc, #468]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e01d      	b.n	8000f6c <HAL_RCC_OscConfig+0xb0>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000f38:	d10c      	bne.n	8000f54 <HAL_RCC_OscConfig+0x98>
 8000f3a:	4b70      	ldr	r3, [pc, #448]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a6f      	ldr	r2, [pc, #444]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	4b6d      	ldr	r3, [pc, #436]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a6c      	ldr	r2, [pc, #432]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e00b      	b.n	8000f6c <HAL_RCC_OscConfig+0xb0>
 8000f54:	4b69      	ldr	r3, [pc, #420]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a68      	ldr	r2, [pc, #416]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b66      	ldr	r3, [pc, #408]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a65      	ldr	r2, [pc, #404]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d013      	beq.n	8000f9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fd2c 	bl	80009d0 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fd28 	bl	80009d0 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	@ 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e207      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0xc0>
 8000f9a:	e014      	b.n	8000fc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fd18 	bl	80009d0 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fd14 	bl	80009d0 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	@ 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e1f3      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	4b51      	ldr	r3, [pc, #324]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0xe8>
 8000fc2:	e000      	b.n	8000fc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d063      	beq.n	800109a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fd2:	4b4a      	ldr	r3, [pc, #296]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00b      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fde:	4b47      	ldr	r3, [pc, #284]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d11c      	bne.n	8001024 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fea:	4b44      	ldr	r3, [pc, #272]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d116      	bne.n	8001024 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff6:	4b41      	ldr	r3, [pc, #260]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x152>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d001      	beq.n	800100e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e1c7      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100e:	4b3b      	ldr	r3, [pc, #236]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4937      	ldr	r1, [pc, #220]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001022:	e03a      	b.n	800109a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d020      	beq.n	800106e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800102c:	4b34      	ldr	r3, [pc, #208]	@ (8001100 <HAL_RCC_OscConfig+0x244>)
 800102e:	2201      	movs	r2, #1
 8001030:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001032:	f7ff fccd 	bl	80009d0 <HAL_GetTick>
 8001036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001038:	e008      	b.n	800104c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fcc9 	bl	80009d0 <HAL_GetTick>
 800103e:	4602      	mov	r2, r0
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	1ad3      	subs	r3, r2, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d901      	bls.n	800104c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001048:	2303      	movs	r3, #3
 800104a:	e1a8      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104c:	4b2b      	ldr	r3, [pc, #172]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f0      	beq.n	800103a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001058:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	00db      	lsls	r3, r3, #3
 8001066:	4925      	ldr	r1, [pc, #148]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8001068:	4313      	orrs	r3, r2
 800106a:	600b      	str	r3, [r1, #0]
 800106c:	e015      	b.n	800109a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800106e:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <HAL_RCC_OscConfig+0x244>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001074:	f7ff fcac 	bl	80009d0 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800107c:	f7ff fca8 	bl	80009d0 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e187      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108e:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0308 	and.w	r3, r3, #8
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d036      	beq.n	8001114 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	695b      	ldr	r3, [r3, #20]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d016      	beq.n	80010dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <HAL_RCC_OscConfig+0x248>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010b4:	f7ff fc8c 	bl	80009d0 <HAL_GetTick>
 80010b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ba:	e008      	b.n	80010ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010bc:	f7ff fc88 	bl	80009d0 <HAL_GetTick>
 80010c0:	4602      	mov	r2, r0
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d901      	bls.n	80010ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e167      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ce:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <HAL_RCC_OscConfig+0x240>)
 80010d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0f0      	beq.n	80010bc <HAL_RCC_OscConfig+0x200>
 80010da:	e01b      	b.n	8001114 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <HAL_RCC_OscConfig+0x248>)
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e2:	f7ff fc75 	bl	80009d0 <HAL_GetTick>
 80010e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e8:	e00e      	b.n	8001108 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ea:	f7ff fc71 	bl	80009d0 <HAL_GetTick>
 80010ee:	4602      	mov	r2, r0
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1ad3      	subs	r3, r2, r3
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d907      	bls.n	8001108 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e150      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
 80010fc:	40023800 	.word	0x40023800
 8001100:	42470000 	.word	0x42470000
 8001104:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001108:	4b88      	ldr	r3, [pc, #544]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 800110a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1ea      	bne.n	80010ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 8097 	beq.w	8001250 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001126:	4b81      	ldr	r3, [pc, #516]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800112a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10f      	bne.n	8001152 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b7d      	ldr	r3, [pc, #500]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113a:	4a7c      	ldr	r2, [pc, #496]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001140:	6413      	str	r3, [r2, #64]	@ 0x40
 8001142:	4b7a      	ldr	r3, [pc, #488]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800114e:	2301      	movs	r3, #1
 8001150:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001152:	4b77      	ldr	r3, [pc, #476]	@ (8001330 <HAL_RCC_OscConfig+0x474>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800115a:	2b00      	cmp	r3, #0
 800115c:	d118      	bne.n	8001190 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800115e:	4b74      	ldr	r3, [pc, #464]	@ (8001330 <HAL_RCC_OscConfig+0x474>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a73      	ldr	r2, [pc, #460]	@ (8001330 <HAL_RCC_OscConfig+0x474>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001168:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800116a:	f7ff fc31 	bl	80009d0 <HAL_GetTick>
 800116e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001170:	e008      	b.n	8001184 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001172:	f7ff fc2d 	bl	80009d0 <HAL_GetTick>
 8001176:	4602      	mov	r2, r0
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d901      	bls.n	8001184 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001180:	2303      	movs	r3, #3
 8001182:	e10c      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001184:	4b6a      	ldr	r3, [pc, #424]	@ (8001330 <HAL_RCC_OscConfig+0x474>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800118c:	2b00      	cmp	r3, #0
 800118e:	d0f0      	beq.n	8001172 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d106      	bne.n	80011a6 <HAL_RCC_OscConfig+0x2ea>
 8001198:	4b64      	ldr	r3, [pc, #400]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 800119a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800119c:	4a63      	ldr	r2, [pc, #396]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80011a4:	e01c      	b.n	80011e0 <HAL_RCC_OscConfig+0x324>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0x30c>
 80011ae:	4b5f      	ldr	r3, [pc, #380]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011b2:	4a5e      	ldr	r2, [pc, #376]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80011ba:	4b5c      	ldr	r3, [pc, #368]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011be:	4a5b      	ldr	r2, [pc, #364]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80011c6:	e00b      	b.n	80011e0 <HAL_RCC_OscConfig+0x324>
 80011c8:	4b58      	ldr	r3, [pc, #352]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011cc:	4a57      	ldr	r2, [pc, #348]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80011d4:	4b55      	ldr	r3, [pc, #340]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80011d8:	4a54      	ldr	r2, [pc, #336]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80011da:	f023 0304 	bic.w	r3, r3, #4
 80011de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d015      	beq.n	8001214 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff fbf2 	bl	80009d0 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ee:	e00a      	b.n	8001206 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011f0:	f7ff fbee 	bl	80009d0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011fe:	4293      	cmp	r3, r2
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e0cb      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001206:	4b49      	ldr	r3, [pc, #292]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0ee      	beq.n	80011f0 <HAL_RCC_OscConfig+0x334>
 8001212:	e014      	b.n	800123e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001214:	f7ff fbdc 	bl	80009d0 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800121a:	e00a      	b.n	8001232 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121c:	f7ff fbd8 	bl	80009d0 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800122a:	4293      	cmp	r3, r2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e0b5      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001232:	4b3e      	ldr	r3, [pc, #248]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d1ee      	bne.n	800121c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001244:	4b39      	ldr	r3, [pc, #228]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	4a38      	ldr	r2, [pc, #224]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 800124a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800124e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80a1 	beq.w	800139c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800125a:	4b34      	ldr	r3, [pc, #208]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	2b08      	cmp	r3, #8
 8001264:	d05c      	beq.n	8001320 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d141      	bne.n	80012f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <HAL_RCC_OscConfig+0x478>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001274:	f7ff fbac 	bl	80009d0 <HAL_GetTick>
 8001278:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800127c:	f7ff fba8 	bl	80009d0 <HAL_GetTick>
 8001280:	4602      	mov	r2, r0
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e087      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800128e:	4b27      	ldr	r3, [pc, #156]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1f0      	bne.n	800127c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69da      	ldr	r2, [r3, #28]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	431a      	orrs	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a8:	019b      	lsls	r3, r3, #6
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b0:	085b      	lsrs	r3, r3, #1
 80012b2:	3b01      	subs	r3, #1
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	431a      	orrs	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012bc:	061b      	lsls	r3, r3, #24
 80012be:	491b      	ldr	r1, [pc, #108]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <HAL_RCC_OscConfig+0x478>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ca:	f7ff fb81 	bl	80009d0 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012d2:	f7ff fb7d 	bl	80009d0 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e05c      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012e4:	4b11      	ldr	r3, [pc, #68]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x416>
 80012f0:	e054      	b.n	800139c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <HAL_RCC_OscConfig+0x478>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fb6a 	bl	80009d0 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001300:	f7ff fb66 	bl	80009d0 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b02      	cmp	r3, #2
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e045      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_RCC_OscConfig+0x470>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1f0      	bne.n	8001300 <HAL_RCC_OscConfig+0x444>
 800131e:	e03d      	b.n	800139c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d107      	bne.n	8001338 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	e038      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000
 8001334:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001338:	4b1b      	ldr	r3, [pc, #108]	@ (80013a8 <HAL_RCC_OscConfig+0x4ec>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d028      	beq.n	8001398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001350:	429a      	cmp	r2, r3
 8001352:	d121      	bne.n	8001398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	429a      	cmp	r2, r3
 8001360:	d11a      	bne.n	8001398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001368:	4013      	ands	r3, r2
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800136e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001370:	4293      	cmp	r3, r2
 8001372:	d111      	bne.n	8001398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	3b01      	subs	r3, #1
 8001382:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001384:	429a      	cmp	r2, r3
 8001386:	d107      	bne.n	8001398 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001392:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023800 	.word	0x40023800

080013ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d101      	bne.n	80013c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e0cc      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013c0:	4b68      	ldr	r3, [pc, #416]	@ (8001564 <HAL_RCC_ClockConfig+0x1b8>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d90c      	bls.n	80013e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b65      	ldr	r3, [pc, #404]	@ (8001564 <HAL_RCC_ClockConfig+0x1b8>)
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b63      	ldr	r3, [pc, #396]	@ (8001564 <HAL_RCC_ClockConfig+0x1b8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e0b8      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d020      	beq.n	8001436 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001400:	4b59      	ldr	r3, [pc, #356]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001402:	689b      	ldr	r3, [r3, #8]
 8001404:	4a58      	ldr	r2, [pc, #352]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800140a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	2b00      	cmp	r3, #0
 8001416:	d005      	beq.n	8001424 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001418:	4b53      	ldr	r3, [pc, #332]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	4a52      	ldr	r2, [pc, #328]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001422:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001424:	4b50      	ldr	r3, [pc, #320]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	494d      	ldr	r1, [pc, #308]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	4313      	orrs	r3, r2
 8001434:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d044      	beq.n	80014cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d107      	bne.n	800145a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144a:	4b47      	ldr	r3, [pc, #284]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d119      	bne.n	800148a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e07f      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	2b02      	cmp	r3, #2
 8001460:	d003      	beq.n	800146a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001466:	2b03      	cmp	r3, #3
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800146a:	4b3f      	ldr	r3, [pc, #252]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d109      	bne.n	800148a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e06f      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800147a:	4b3b      	ldr	r3, [pc, #236]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e067      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800148a:	4b37      	ldr	r3, [pc, #220]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f023 0203 	bic.w	r2, r3, #3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	4934      	ldr	r1, [pc, #208]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001498:	4313      	orrs	r3, r2
 800149a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800149c:	f7ff fa98 	bl	80009d0 <HAL_GetTick>
 80014a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014a2:	e00a      	b.n	80014ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a4:	f7ff fa94 	bl	80009d0 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e04f      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 020c 	and.w	r2, r3, #12
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d1eb      	bne.n	80014a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014cc:	4b25      	ldr	r3, [pc, #148]	@ (8001564 <HAL_RCC_ClockConfig+0x1b8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0307 	and.w	r3, r3, #7
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d20c      	bcs.n	80014f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014da:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <HAL_RCC_ClockConfig+0x1b8>)
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	4b20      	ldr	r3, [pc, #128]	@ (8001564 <HAL_RCC_ClockConfig+0x1b8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d001      	beq.n	80014f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e032      	b.n	800155a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d008      	beq.n	8001512 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001500:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	4916      	ldr	r1, [pc, #88]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800150e:	4313      	orrs	r3, r2
 8001510:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	2b00      	cmp	r3, #0
 800151c:	d009      	beq.n	8001532 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	490e      	ldr	r1, [pc, #56]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	4313      	orrs	r3, r2
 8001530:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001532:	f000 f821 	bl	8001578 <HAL_RCC_GetSysClockFreq>
 8001536:	4602      	mov	r2, r0
 8001538:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <HAL_RCC_ClockConfig+0x1bc>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	091b      	lsrs	r3, r3, #4
 800153e:	f003 030f 	and.w	r3, r3, #15
 8001542:	490a      	ldr	r1, [pc, #40]	@ (800156c <HAL_RCC_ClockConfig+0x1c0>)
 8001544:	5ccb      	ldrb	r3, [r1, r3]
 8001546:	fa22 f303 	lsr.w	r3, r2, r3
 800154a:	4a09      	ldr	r2, [pc, #36]	@ (8001570 <HAL_RCC_ClockConfig+0x1c4>)
 800154c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <HAL_RCC_ClockConfig+0x1c8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff f9f8 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023c00 	.word	0x40023c00
 8001568:	40023800 	.word	0x40023800
 800156c:	08004e30 	.word	0x08004e30
 8001570:	20000034 	.word	0x20000034
 8001574:	20000038 	.word	0x20000038

08001578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800157c:	b090      	sub	sp, #64	@ 0x40
 800157e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	637b      	str	r3, [r7, #52]	@ 0x34
 8001584:	2300      	movs	r3, #0
 8001586:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001588:	2300      	movs	r3, #0
 800158a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001590:	4b59      	ldr	r3, [pc, #356]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b08      	cmp	r3, #8
 800159a:	d00d      	beq.n	80015b8 <HAL_RCC_GetSysClockFreq+0x40>
 800159c:	2b08      	cmp	r3, #8
 800159e:	f200 80a1 	bhi.w	80016e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d002      	beq.n	80015ac <HAL_RCC_GetSysClockFreq+0x34>
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	d003      	beq.n	80015b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80015aa:	e09b      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ac:	4b53      	ldr	r3, [pc, #332]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x184>)
 80015ae:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80015b0:	e09b      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015b2:	4b53      	ldr	r3, [pc, #332]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x188>)
 80015b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80015b6:	e098      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015b8:	4b4f      	ldr	r3, [pc, #316]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015c2:	4b4d      	ldr	r3, [pc, #308]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d028      	beq.n	8001620 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ce:	4b4a      	ldr	r3, [pc, #296]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	2200      	movs	r2, #0
 80015d6:	623b      	str	r3, [r7, #32]
 80015d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80015e0:	2100      	movs	r1, #0
 80015e2:	4b47      	ldr	r3, [pc, #284]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x188>)
 80015e4:	fb03 f201 	mul.w	r2, r3, r1
 80015e8:	2300      	movs	r3, #0
 80015ea:	fb00 f303 	mul.w	r3, r0, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	4a43      	ldr	r2, [pc, #268]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x188>)
 80015f2:	fba0 1202 	umull	r1, r2, r0, r2
 80015f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015f8:	460a      	mov	r2, r1
 80015fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80015fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80015fe:	4413      	add	r3, r2
 8001600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001604:	2200      	movs	r2, #0
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	61fa      	str	r2, [r7, #28]
 800160a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800160e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001612:	f7fe fddf 	bl	80001d4 <__aeabi_uldivmod>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4613      	mov	r3, r2
 800161c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800161e:	e053      	b.n	80016c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001620:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	099b      	lsrs	r3, r3, #6
 8001626:	2200      	movs	r2, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	617a      	str	r2, [r7, #20]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001632:	f04f 0b00 	mov.w	fp, #0
 8001636:	4652      	mov	r2, sl
 8001638:	465b      	mov	r3, fp
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	0159      	lsls	r1, r3, #5
 8001644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001648:	0150      	lsls	r0, r2, #5
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	ebb2 080a 	subs.w	r8, r2, sl
 8001652:	eb63 090b 	sbc.w	r9, r3, fp
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001662:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001666:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800166a:	ebb2 0408 	subs.w	r4, r2, r8
 800166e:	eb63 0509 	sbc.w	r5, r3, r9
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	f04f 0300 	mov.w	r3, #0
 800167a:	00eb      	lsls	r3, r5, #3
 800167c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001680:	00e2      	lsls	r2, r4, #3
 8001682:	4614      	mov	r4, r2
 8001684:	461d      	mov	r5, r3
 8001686:	eb14 030a 	adds.w	r3, r4, sl
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	eb45 030b 	adc.w	r3, r5, fp
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800169e:	4629      	mov	r1, r5
 80016a0:	028b      	lsls	r3, r1, #10
 80016a2:	4621      	mov	r1, r4
 80016a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016a8:	4621      	mov	r1, r4
 80016aa:	028a      	lsls	r2, r1, #10
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016b2:	2200      	movs	r2, #0
 80016b4:	60bb      	str	r3, [r7, #8]
 80016b6:	60fa      	str	r2, [r7, #12]
 80016b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016bc:	f7fe fd8a 	bl	80001d4 <__aeabi_uldivmod>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4613      	mov	r3, r2
 80016c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	0c1b      	lsrs	r3, r3, #16
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	3301      	adds	r3, #1
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80016d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016e2:	e002      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016e4:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x184>)
 80016e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3740      	adds	r7, #64	@ 0x40
 80016f0:	46bd      	mov	sp, r7
 80016f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	00f42400 	.word	0x00f42400
 8001700:	017d7840 	.word	0x017d7840

08001704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001708:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <HAL_RCC_GetHCLKFreq+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000034 	.word	0x20000034

0800171c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001720:	f7ff fff0 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 8001724:	4602      	mov	r2, r0
 8001726:	4b05      	ldr	r3, [pc, #20]	@ (800173c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	0a9b      	lsrs	r3, r3, #10
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	4903      	ldr	r1, [pc, #12]	@ (8001740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	08004e40 	.word	0x08004e40

08001744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001748:	f7ff ffdc 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 800174c:	4602      	mov	r2, r0
 800174e:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	0b5b      	lsrs	r3, r3, #13
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	4903      	ldr	r1, [pc, #12]	@ (8001768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800175a:	5ccb      	ldrb	r3, [r1, r3]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	08004e40 	.word	0x08004e40

0800176c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e03f      	b.n	80017fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff f844 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2224      	movs	r2, #36	@ 0x24
 800179c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68da      	ldr	r2, [r3, #12]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80017ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f829 	bl	8001808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	691a      	ldr	r2, [r3, #16]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80017c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80017d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80017e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2220      	movs	r2, #32
 80017f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2220      	movs	r2, #32
 80017f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800180c:	b0c0      	sub	sp, #256	@ 0x100
 800180e:	af00      	add	r7, sp, #0
 8001810:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001824:	68d9      	ldr	r1, [r3, #12]
 8001826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	ea40 0301 	orr.w	r3, r0, r1
 8001830:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	431a      	orrs	r2, r3
 8001840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	431a      	orrs	r2, r3
 8001848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4313      	orrs	r3, r2
 8001850:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001860:	f021 010c 	bic.w	r1, r1, #12
 8001864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800186e:	430b      	orrs	r3, r1
 8001870:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800187e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001882:	6999      	ldr	r1, [r3, #24]
 8001884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	ea40 0301 	orr.w	r3, r0, r1
 800188e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	4b8f      	ldr	r3, [pc, #572]	@ (8001ad4 <UART_SetConfig+0x2cc>)
 8001898:	429a      	cmp	r2, r3
 800189a:	d005      	beq.n	80018a8 <UART_SetConfig+0xa0>
 800189c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	4b8d      	ldr	r3, [pc, #564]	@ (8001ad8 <UART_SetConfig+0x2d0>)
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d104      	bne.n	80018b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80018a8:	f7ff ff4c 	bl	8001744 <HAL_RCC_GetPCLK2Freq>
 80018ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80018b0:	e003      	b.n	80018ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80018b2:	f7ff ff33 	bl	800171c <HAL_RCC_GetPCLK1Freq>
 80018b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80018ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018c4:	f040 810c 	bne.w	8001ae0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80018c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80018cc:	2200      	movs	r2, #0
 80018ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80018d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80018d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80018da:	4622      	mov	r2, r4
 80018dc:	462b      	mov	r3, r5
 80018de:	1891      	adds	r1, r2, r2
 80018e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80018e2:	415b      	adcs	r3, r3
 80018e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80018e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80018ea:	4621      	mov	r1, r4
 80018ec:	eb12 0801 	adds.w	r8, r2, r1
 80018f0:	4629      	mov	r1, r5
 80018f2:	eb43 0901 	adc.w	r9, r3, r1
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800190a:	4690      	mov	r8, r2
 800190c:	4699      	mov	r9, r3
 800190e:	4623      	mov	r3, r4
 8001910:	eb18 0303 	adds.w	r3, r8, r3
 8001914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001918:	462b      	mov	r3, r5
 800191a:	eb49 0303 	adc.w	r3, r9, r3
 800191e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800192e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001932:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001936:	460b      	mov	r3, r1
 8001938:	18db      	adds	r3, r3, r3
 800193a:	653b      	str	r3, [r7, #80]	@ 0x50
 800193c:	4613      	mov	r3, r2
 800193e:	eb42 0303 	adc.w	r3, r2, r3
 8001942:	657b      	str	r3, [r7, #84]	@ 0x54
 8001944:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001948:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800194c:	f7fe fc42 	bl	80001d4 <__aeabi_uldivmod>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4b61      	ldr	r3, [pc, #388]	@ (8001adc <UART_SetConfig+0x2d4>)
 8001956:	fba3 2302 	umull	r2, r3, r3, r2
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	011c      	lsls	r4, r3, #4
 800195e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001962:	2200      	movs	r2, #0
 8001964:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001968:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800196c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001970:	4642      	mov	r2, r8
 8001972:	464b      	mov	r3, r9
 8001974:	1891      	adds	r1, r2, r2
 8001976:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001978:	415b      	adcs	r3, r3
 800197a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800197c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001980:	4641      	mov	r1, r8
 8001982:	eb12 0a01 	adds.w	sl, r2, r1
 8001986:	4649      	mov	r1, r9
 8001988:	eb43 0b01 	adc.w	fp, r3, r1
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001998:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800199c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80019a0:	4692      	mov	sl, r2
 80019a2:	469b      	mov	fp, r3
 80019a4:	4643      	mov	r3, r8
 80019a6:	eb1a 0303 	adds.w	r3, sl, r3
 80019aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80019ae:	464b      	mov	r3, r9
 80019b0:	eb4b 0303 	adc.w	r3, fp, r3
 80019b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80019b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80019c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80019c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80019cc:	460b      	mov	r3, r1
 80019ce:	18db      	adds	r3, r3, r3
 80019d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80019d2:	4613      	mov	r3, r2
 80019d4:	eb42 0303 	adc.w	r3, r2, r3
 80019d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80019da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80019de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80019e2:	f7fe fbf7 	bl	80001d4 <__aeabi_uldivmod>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4611      	mov	r1, r2
 80019ec:	4b3b      	ldr	r3, [pc, #236]	@ (8001adc <UART_SetConfig+0x2d4>)
 80019ee:	fba3 2301 	umull	r2, r3, r3, r1
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2264      	movs	r2, #100	@ 0x64
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	1acb      	subs	r3, r1, r3
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001a02:	4b36      	ldr	r3, [pc, #216]	@ (8001adc <UART_SetConfig+0x2d4>)
 8001a04:	fba3 2302 	umull	r2, r3, r3, r2
 8001a08:	095b      	lsrs	r3, r3, #5
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001a10:	441c      	add	r4, r3
 8001a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a16:	2200      	movs	r2, #0
 8001a18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001a20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001a24:	4642      	mov	r2, r8
 8001a26:	464b      	mov	r3, r9
 8001a28:	1891      	adds	r1, r2, r2
 8001a2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001a2c:	415b      	adcs	r3, r3
 8001a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a34:	4641      	mov	r1, r8
 8001a36:	1851      	adds	r1, r2, r1
 8001a38:	6339      	str	r1, [r7, #48]	@ 0x30
 8001a3a:	4649      	mov	r1, r9
 8001a3c:	414b      	adcs	r3, r1
 8001a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	f04f 0300 	mov.w	r3, #0
 8001a48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001a4c:	4659      	mov	r1, fp
 8001a4e:	00cb      	lsls	r3, r1, #3
 8001a50:	4651      	mov	r1, sl
 8001a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a56:	4651      	mov	r1, sl
 8001a58:	00ca      	lsls	r2, r1, #3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4642      	mov	r2, r8
 8001a62:	189b      	adds	r3, r3, r2
 8001a64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001a68:	464b      	mov	r3, r9
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	eb42 0303 	adc.w	r3, r2, r3
 8001a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001a88:	460b      	mov	r3, r1
 8001a8a:	18db      	adds	r3, r3, r3
 8001a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a8e:	4613      	mov	r3, r2
 8001a90:	eb42 0303 	adc.w	r3, r2, r3
 8001a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001a9e:	f7fe fb99 	bl	80001d4 <__aeabi_uldivmod>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8001adc <UART_SetConfig+0x2d4>)
 8001aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8001aac:	095b      	lsrs	r3, r3, #5
 8001aae:	2164      	movs	r1, #100	@ 0x64
 8001ab0:	fb01 f303 	mul.w	r3, r1, r3
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	3332      	adds	r3, #50	@ 0x32
 8001aba:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <UART_SetConfig+0x2d4>)
 8001abc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac0:	095b      	lsrs	r3, r3, #5
 8001ac2:	f003 0207 	and.w	r2, r3, #7
 8001ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4422      	add	r2, r4
 8001ace:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001ad0:	e106      	b.n	8001ce0 <UART_SetConfig+0x4d8>
 8001ad2:	bf00      	nop
 8001ad4:	40011000 	.word	0x40011000
 8001ad8:	40011400 	.word	0x40011400
 8001adc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001aea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001aee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001af2:	4642      	mov	r2, r8
 8001af4:	464b      	mov	r3, r9
 8001af6:	1891      	adds	r1, r2, r2
 8001af8:	6239      	str	r1, [r7, #32]
 8001afa:	415b      	adcs	r3, r3
 8001afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001afe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b02:	4641      	mov	r1, r8
 8001b04:	1854      	adds	r4, r2, r1
 8001b06:	4649      	mov	r1, r9
 8001b08:	eb43 0501 	adc.w	r5, r3, r1
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	00eb      	lsls	r3, r5, #3
 8001b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b1a:	00e2      	lsls	r2, r4, #3
 8001b1c:	4614      	mov	r4, r2
 8001b1e:	461d      	mov	r5, r3
 8001b20:	4643      	mov	r3, r8
 8001b22:	18e3      	adds	r3, r4, r3
 8001b24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001b28:	464b      	mov	r3, r9
 8001b2a:	eb45 0303 	adc.w	r3, r5, r3
 8001b2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001b3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001b42:	f04f 0200 	mov.w	r2, #0
 8001b46:	f04f 0300 	mov.w	r3, #0
 8001b4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001b4e:	4629      	mov	r1, r5
 8001b50:	008b      	lsls	r3, r1, #2
 8001b52:	4621      	mov	r1, r4
 8001b54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001b58:	4621      	mov	r1, r4
 8001b5a:	008a      	lsls	r2, r1, #2
 8001b5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8001b60:	f7fe fb38 	bl	80001d4 <__aeabi_uldivmod>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4b60      	ldr	r3, [pc, #384]	@ (8001cec <UART_SetConfig+0x4e4>)
 8001b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	011c      	lsls	r4, r3, #4
 8001b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001b76:	2200      	movs	r2, #0
 8001b78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001b84:	4642      	mov	r2, r8
 8001b86:	464b      	mov	r3, r9
 8001b88:	1891      	adds	r1, r2, r2
 8001b8a:	61b9      	str	r1, [r7, #24]
 8001b8c:	415b      	adcs	r3, r3
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b94:	4641      	mov	r1, r8
 8001b96:	1851      	adds	r1, r2, r1
 8001b98:	6139      	str	r1, [r7, #16]
 8001b9a:	4649      	mov	r1, r9
 8001b9c:	414b      	adcs	r3, r1
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bac:	4659      	mov	r1, fp
 8001bae:	00cb      	lsls	r3, r1, #3
 8001bb0:	4651      	mov	r1, sl
 8001bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001bb6:	4651      	mov	r1, sl
 8001bb8:	00ca      	lsls	r2, r1, #3
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4642      	mov	r2, r8
 8001bc2:	189b      	adds	r3, r3, r2
 8001bc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001bc8:	464b      	mov	r3, r9
 8001bca:	460a      	mov	r2, r1
 8001bcc:	eb42 0303 	adc.w	r3, r2, r3
 8001bd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001bde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8001bec:	4649      	mov	r1, r9
 8001bee:	008b      	lsls	r3, r1, #2
 8001bf0:	4641      	mov	r1, r8
 8001bf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001bf6:	4641      	mov	r1, r8
 8001bf8:	008a      	lsls	r2, r1, #2
 8001bfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001bfe:	f7fe fae9 	bl	80001d4 <__aeabi_uldivmod>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4611      	mov	r1, r2
 8001c08:	4b38      	ldr	r3, [pc, #224]	@ (8001cec <UART_SetConfig+0x4e4>)
 8001c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2264      	movs	r2, #100	@ 0x64
 8001c12:	fb02 f303 	mul.w	r3, r2, r3
 8001c16:	1acb      	subs	r3, r1, r3
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	3332      	adds	r3, #50	@ 0x32
 8001c1c:	4a33      	ldr	r2, [pc, #204]	@ (8001cec <UART_SetConfig+0x4e4>)
 8001c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c22:	095b      	lsrs	r3, r3, #5
 8001c24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c28:	441c      	add	r4, r3
 8001c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001c2e:	2200      	movs	r2, #0
 8001c30:	673b      	str	r3, [r7, #112]	@ 0x70
 8001c32:	677a      	str	r2, [r7, #116]	@ 0x74
 8001c34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8001c38:	4642      	mov	r2, r8
 8001c3a:	464b      	mov	r3, r9
 8001c3c:	1891      	adds	r1, r2, r2
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	415b      	adcs	r3, r3
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c48:	4641      	mov	r1, r8
 8001c4a:	1851      	adds	r1, r2, r1
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	4649      	mov	r1, r9
 8001c50:	414b      	adcs	r3, r1
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001c60:	4659      	mov	r1, fp
 8001c62:	00cb      	lsls	r3, r1, #3
 8001c64:	4651      	mov	r1, sl
 8001c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001c6a:	4651      	mov	r1, sl
 8001c6c:	00ca      	lsls	r2, r1, #3
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	4603      	mov	r3, r0
 8001c74:	4642      	mov	r2, r8
 8001c76:	189b      	adds	r3, r3, r2
 8001c78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c7a:	464b      	mov	r3, r9
 8001c7c:	460a      	mov	r2, r1
 8001c7e:	eb42 0303 	adc.w	r3, r2, r3
 8001c82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8001c9c:	4649      	mov	r1, r9
 8001c9e:	008b      	lsls	r3, r1, #2
 8001ca0:	4641      	mov	r1, r8
 8001ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ca6:	4641      	mov	r1, r8
 8001ca8:	008a      	lsls	r2, r1, #2
 8001caa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001cae:	f7fe fa91 	bl	80001d4 <__aeabi_uldivmod>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <UART_SetConfig+0x4e4>)
 8001cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8001cbc:	095b      	lsrs	r3, r3, #5
 8001cbe:	2164      	movs	r1, #100	@ 0x64
 8001cc0:	fb01 f303 	mul.w	r3, r1, r3
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	3332      	adds	r3, #50	@ 0x32
 8001cca:	4a08      	ldr	r2, [pc, #32]	@ (8001cec <UART_SetConfig+0x4e4>)
 8001ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd0:	095b      	lsrs	r3, r3, #5
 8001cd2:	f003 020f 	and.w	r2, r3, #15
 8001cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4422      	add	r2, r4
 8001cde:	609a      	str	r2, [r3, #8]
}
 8001ce0:	bf00      	nop
 8001ce2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cec:	51eb851f 	.word	0x51eb851f

08001cf0 <rotlFixed>:

#else /* generic */
/* This routine performs a left circular arithmetic shift of <x> by <y> value. */

    WC_MISC_STATIC WC_INLINE word32 rotlFixed(word32 x, word32 y)
    {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
        return (x << y) | (x >> (sizeof(x) * 8 - y));
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f1c3 0320 	rsb	r3, r3, #32
 8001d02:	fa62 f303 	ror.w	r3, r2, r3
    }
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <ByteReverseWord32>:
/* This routine performs a byte swap of 32-bit word value. */
#if defined(__CCRX__) && !defined(NO_INLINE) /* shortest version for CC-RX */
    #define ByteReverseWord32(value) _builtin_revl(value)
#else
WC_MISC_STATIC WC_INLINE word32 ByteReverseWord32(word32 value)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
    /* 5 instructions with rotate instruction, 9 without */
    return (rotrFixed(value, 8U) & 0xff00ff00) |
           (rotlFixed(value, 8U) & 0x00ff00ff);
#else
    /* 6 instructions with rotate instruction, 8 without */
    value = ((value & 0xFF00FF00) >> 8) | ((value & 0x00FF00FF) << 8);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	0a1b      	lsrs	r3, r3, #8
 8001d1e:	f003 12ff 	and.w	r2, r3, #16711935	@ 0xff00ff
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	f003 23ff 	and.w	r3, r3, #4278255360	@ 0xff00ff00
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	607b      	str	r3, [r7, #4]
    return rotlFixed(value, 16U);
 8001d2e:	2110      	movs	r1, #16
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ffdd 	bl	8001cf0 <rotlFixed>
 8001d36:	4603      	mov	r3, r0
#endif
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <ByteReverseWords>:
#endif /* __CCRX__ */
/* This routine performs a byte swap of words array of a given count. */
WC_MISC_STATIC WC_INLINE void ByteReverseWords(word32* out, const word32* in,
                                    word32 byteCount)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
#ifdef WOLFSSL_USE_ALIGN
    if ((((size_t)in & 0x3) == 0) &&
        (((size_t)out & 0x3) == 0))
#endif
    {
        word32 count = byteCount/(word32)sizeof(word32);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	613b      	str	r3, [r7, #16]
        for (i = 0; i < count; i++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e010      	b.n	8001d7a <ByteReverseWords+0x3a>
            out[i] = ByteReverseWord32(in[i]);
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	68ba      	ldr	r2, [r7, #8]
 8001d5e:	4413      	add	r3, r2
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	18d4      	adds	r4, r2, r3
 8001d6a:	4608      	mov	r0, r1
 8001d6c:	f7ff ffd1 	bl	8001d12 <ByteReverseWord32>
 8001d70:	4603      	mov	r3, r0
 8001d72:	6023      	str	r3, [r4, #0]
        for (i = 0; i < count; i++)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	3301      	adds	r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d3ea      	bcc.n	8001d58 <ByteReverseWords+0x18>
            scratch = ByteReverseWord32(scratch);
            XMEMCPY(out_bytes + i, &scratch, sizeof(scratch));
        }
    }
#endif
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd90      	pop	{r4, r7, pc}

08001d8c <XorWords>:

/* This routine performs a bitwise XOR operation of <*r> and <*a> for <n> number
of wolfssl_words, placing the result in <*r>. */
WC_MISC_STATIC WC_INLINE void XorWords(wolfssl_word** r, const wolfssl_word** a,
                                       word32 n)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
    word32 i;

    for (i = 0; i < n; i++)
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	e010      	b.n	8001dc0 <XorWords+0x34>
        *((*r)++) ^= *((*a)++);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	1d19      	adds	r1, r3, #4
 8001da4:	68ba      	ldr	r2, [r7, #8]
 8001da6:	6011      	str	r1, [r2, #0]
 8001da8:	6819      	ldr	r1, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	1d18      	adds	r0, r3, #4
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	6010      	str	r0, [r2, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	404a      	eors	r2, r1
 8001db8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < n; i++)
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d3ea      	bcc.n	8001d9e <XorWords+0x12>
}
 8001dc8:	bf00      	nop
 8001dca:	bf00      	nop
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <xorbuf>:

/* This routine performs a bitwise XOR operation of <*buf> and <*mask> of n
counts, placing the result in <*buf>. */

WC_MISC_STATIC WC_INLINE void xorbuf(void* buf, const void* mask, word32 count)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b08a      	sub	sp, #40	@ 0x28
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	60f8      	str	r0, [r7, #12]
 8001dde:	60b9      	str	r1, [r7, #8]
 8001de0:	607a      	str	r2, [r7, #4]
    word32      i;
    byte*       b;
    const byte* m;

    b = (byte*)buf;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	623b      	str	r3, [r7, #32]
    m = (const byte*)mask;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	61fb      	str	r3, [r7, #28]

    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 8001dea:	6a3a      	ldr	r2, [r7, #32]
            ((wc_ptr_t)m) % WOLFSSL_WORD_SIZE) {
 8001dec:	69fb      	ldr	r3, [r7, #28]
    if (((wc_ptr_t)b) % WOLFSSL_WORD_SIZE ==
 8001dee:	4053      	eors	r3, r2
 8001df0:	f003 0303 	and.w	r3, r3, #3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d12b      	bne.n	8001e50 <xorbuf+0x7a>
            const wolfssl_word* wp;
        } tpm;
        /* Alignment checks out. Possible to XOR words. */
        /* Move alignment so that it lines up with a
         * WOLFSSL_WORD_SIZE boundary */
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 8001df8:	e00d      	b.n	8001e16 <xorbuf+0x40>
            *(b++) ^= *(m++);
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	61fa      	str	r2, [r7, #28]
 8001e00:	7819      	ldrb	r1, [r3, #0]
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	623a      	str	r2, [r7, #32]
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	404a      	eors	r2, r1
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	701a      	strb	r2, [r3, #0]
            count--;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	607b      	str	r3, [r7, #4]
        while (((wc_ptr_t)buf) % WOLFSSL_WORD_SIZE != 0 && count > 0) {
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0303 	and.w	r3, r3, #3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <xorbuf+0x50>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d1e9      	bne.n	8001dfa <xorbuf+0x24>
        }
        tpb.bp = b;
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	61bb      	str	r3, [r7, #24]
        tpm.bp = m;
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	617b      	str	r3, [r7, #20]
        XorWords( &tpb.wp, &tpm.wp, count / WOLFSSL_WORD_SIZE);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	089a      	lsrs	r2, r3, #2
 8001e32:	f107 0114 	add.w	r1, r7, #20
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ffa6 	bl	8001d8c <XorWords>
        b = tpb.bp;
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	623b      	str	r3, [r7, #32]
        m = tpm.bp;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	61fb      	str	r3, [r7, #28]
        count %= WOLFSSL_WORD_SIZE;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	607b      	str	r3, [r7, #4]
    }

    for (i = 0; i < count; i++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e54:	e010      	b.n	8001e78 <xorbuf+0xa2>
        b[i] ^= m[i];
 8001e56:	6a3a      	ldr	r2, [r7, #32]
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	4413      	add	r3, r2
 8001e5c:	7819      	ldrb	r1, [r3, #0]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	4413      	add	r3, r2
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	6a38      	ldr	r0, [r7, #32]
 8001e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6a:	4403      	add	r3, r0
 8001e6c:	404a      	eors	r2, r1
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++)
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	3301      	adds	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d3ea      	bcc.n	8001e56 <xorbuf+0x80>
}
 8001e80:	bf00      	nop
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	@ 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <ForceZero>:

#ifndef WOLFSSL_NO_FORCE_ZERO
/* This routine fills the first len bytes of the memory area pointed by mem
   with zeros. It ensures compiler optimizations doesn't skip it  */
WC_MISC_STATIC WC_INLINE void ForceZero(void* mem, word32 len)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
    volatile byte* z = (volatile byte*)mem;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	60fb      	str	r3, [r7, #12]
            *w++ = 0;
        }
    z = (volatile byte*)w;
#endif

    while (len--) *z++ = 0;
 8001e98:	e004      	b.n	8001ea4 <ForceZero+0x1a>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	60fa      	str	r2, [r7, #12]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	1e5a      	subs	r2, r3, #1
 8001ea8:	603a      	str	r2, [r7, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f5      	bne.n	8001e9a <ForceZero+0x10>
}
 8001eae:	bf00      	nop
 8001eb0:	bf00      	nop
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <PreFetchTe>:
#endif

#ifndef WOLFSSL_AES_SMALL_TABLES
/* load 4 Te Tables into cache by cache line stride */
static WARN_UNUSED_RESULT WC_INLINE word32 PreFetchTe(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
#ifndef WOLFSSL_AES_TOUCH_LINES
    word32 x = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
    int i,j;

    for (i = 0; i < 4; i++) {
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	e015      	b.n	8001ef8 <PreFetchTe+0x3c>
        /* 256 elements, each one is 4 bytes */
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	e00c      	b.n	8001eec <PreFetchTe+0x30>
            x &= Te[i][j];
 8001ed2:	490e      	ldr	r1, [pc, #56]	@ (8001f0c <PreFetchTe+0x50>)
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	021a      	lsls	r2, r3, #8
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4413      	add	r3, r2
 8001edc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3308      	adds	r3, #8
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2bff      	cmp	r3, #255	@ 0xff
 8001ef0:	ddef      	ble.n	8001ed2 <PreFetchTe+0x16>
    for (i = 0; i < 4; i++) {
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	dde6      	ble.n	8001ecc <PreFetchTe+0x10>
        }
    }
    return x;
 8001efe:	68fb      	ldr	r3, [r7, #12]
#else
    return 0;
#endif
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	08004e70 	.word	0x08004e70

08001f10 <AesEncrypt_C>:
 * @param [out] outBlock  Encrypted block.
 * @param [in]  r         Rounds divided by 2.
 */
static void AesEncrypt_C(Aes* aes, const byte* inBlock, byte* outBlock,
        word32 r)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	@ 0x38
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
    const word32* rk;

#ifdef WC_C_DYNAMIC_FALLBACK
    rk = aes->key_C_fallback;
#else
    rk = aes->key;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24

    /*
     * map byte array block to cipher state
     * and add initial round key:
     */
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	623b      	str	r3, [r7, #32]
    XMEMCPY(&s1, inBlock +     sizeof(s0), sizeof(s1));
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	61fb      	str	r3, [r7, #28]
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	3308      	adds	r3, #8
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	61bb      	str	r3, [r7, #24]
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	330c      	adds	r3, #12
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	617b      	str	r3, [r7, #20]

#ifdef LITTLE_ENDIAN_ORDER
    s0 = ByteReverseWord32(s0);
 8001f40:	6a3b      	ldr	r3, [r7, #32]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fee5 	bl	8001d12 <ByteReverseWord32>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	623b      	str	r3, [r7, #32]
    s1 = ByteReverseWord32(s1);
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fedf 	bl	8001d12 <ByteReverseWord32>
 8001f54:	4603      	mov	r3, r0
 8001f56:	61fb      	str	r3, [r7, #28]
    s2 = ByteReverseWord32(s2);
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff fed9 	bl	8001d12 <ByteReverseWord32>
 8001f60:	4603      	mov	r3, r0
 8001f62:	61bb      	str	r3, [r7, #24]
    s3 = ByteReverseWord32(s3);
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fed3 	bl	8001d12 <ByteReverseWord32>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	617b      	str	r3, [r7, #20]
#endif

    /* AddRoundKey */
    s0 ^= rk[0];
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	4053      	eors	r3, r2
 8001f78:	623b      	str	r3, [r7, #32]
    s1 ^= rk[1];
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	4053      	eors	r3, r2
 8001f84:	61fb      	str	r3, [r7, #28]
    s2 ^= rk[2];
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	3308      	adds	r3, #8
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	4053      	eors	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
    s3 ^= rk[3];
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	330c      	adds	r3, #12
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	4053      	eors	r3, r2
 8001f9c:	617b      	str	r3, [r7, #20]

#ifndef WOLFSSL_AES_SMALL_TABLES
#ifndef WC_NO_CACHE_RESISTANT
    s0 |= PreFetchTe();
 8001f9e:	f7ff ff8d 	bl	8001ebc <PreFetchTe>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	623b      	str	r3, [r7, #32]
    s0 ^= rk[(o)+0]; s1 ^= rk[(o)+1]; s2 ^= rk[(o)+2]; s3 ^= rk[(o)+3];
#endif

#ifndef WOLFSSL_AES_NO_UNROLL
/* Unroll the loop. */
                       ENC_ROUND_T_S( 0);
 8001faa:	6a3b      	ldr	r3, [r7, #32]
 8001fac:	0e1b      	lsrs	r3, r3, #24
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4bb6      	ldr	r3, [pc, #728]	@ (800228c <AesEncrypt_C+0x37c>)
 8001fb4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	0c1b      	lsrs	r3, r3, #16
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	49b3      	ldr	r1, [pc, #716]	@ (800228c <AesEncrypt_C+0x37c>)
 8001fc0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001fc4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fc8:	405a      	eors	r2, r3
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	49ae      	ldr	r1, [pc, #696]	@ (800228c <AesEncrypt_C+0x37c>)
 8001fd2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001fd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fda:	405a      	eors	r2, r3
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	49aa      	ldr	r1, [pc, #680]	@ (800228c <AesEncrypt_C+0x37c>)
 8001fe2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001fe6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001fea:	405a      	eors	r2, r3
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	3310      	adds	r3, #16
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4053      	eors	r3, r2
 8001ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	0e1b      	lsrs	r3, r3, #24
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4ba3      	ldr	r3, [pc, #652]	@ (800228c <AesEncrypt_C+0x37c>)
 8002000:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	0c1b      	lsrs	r3, r3, #16
 8002008:	b2db      	uxtb	r3, r3
 800200a:	49a0      	ldr	r1, [pc, #640]	@ (800228c <AesEncrypt_C+0x37c>)
 800200c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002010:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002014:	405a      	eors	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	b2db      	uxtb	r3, r3
 800201c:	499b      	ldr	r1, [pc, #620]	@ (800228c <AesEncrypt_C+0x37c>)
 800201e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002022:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002026:	405a      	eors	r2, r3
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	4997      	ldr	r1, [pc, #604]	@ (800228c <AesEncrypt_C+0x37c>)
 800202e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002032:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002036:	405a      	eors	r2, r3
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	3314      	adds	r3, #20
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4053      	eors	r3, r2
 8002040:	633b      	str	r3, [r7, #48]	@ 0x30
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	0e1b      	lsrs	r3, r3, #24
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	4b90      	ldr	r3, [pc, #576]	@ (800228c <AesEncrypt_C+0x37c>)
 800204c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	0c1b      	lsrs	r3, r3, #16
 8002054:	b2db      	uxtb	r3, r3
 8002056:	498d      	ldr	r1, [pc, #564]	@ (800228c <AesEncrypt_C+0x37c>)
 8002058:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800205c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002060:	405a      	eors	r2, r3
 8002062:	6a3b      	ldr	r3, [r7, #32]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	b2db      	uxtb	r3, r3
 8002068:	4988      	ldr	r1, [pc, #544]	@ (800228c <AesEncrypt_C+0x37c>)
 800206a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800206e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002072:	405a      	eors	r2, r3
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4984      	ldr	r1, [pc, #528]	@ (800228c <AesEncrypt_C+0x37c>)
 800207a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800207e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002082:	405a      	eors	r2, r3
 8002084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002086:	3318      	adds	r3, #24
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4053      	eors	r3, r2
 800208c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	0e1b      	lsrs	r3, r3, #24
 8002092:	b2db      	uxtb	r3, r3
 8002094:	461a      	mov	r2, r3
 8002096:	4b7d      	ldr	r3, [pc, #500]	@ (800228c <AesEncrypt_C+0x37c>)
 8002098:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800209c:	6a3b      	ldr	r3, [r7, #32]
 800209e:	0c1b      	lsrs	r3, r3, #16
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	497a      	ldr	r1, [pc, #488]	@ (800228c <AesEncrypt_C+0x37c>)
 80020a4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80020a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020ac:	405a      	eors	r2, r3
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	0a1b      	lsrs	r3, r3, #8
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4975      	ldr	r1, [pc, #468]	@ (800228c <AesEncrypt_C+0x37c>)
 80020b6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80020ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020be:	405a      	eors	r2, r3
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	4971      	ldr	r1, [pc, #452]	@ (800228c <AesEncrypt_C+0x37c>)
 80020c6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80020ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020ce:	405a      	eors	r2, r3
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	331c      	adds	r3, #28
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4053      	eors	r3, r2
 80020d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    ENC_ROUND_S_T( 8); ENC_ROUND_T_S( 8);
 80020da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020dc:	0e1b      	lsrs	r3, r3, #24
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b6a      	ldr	r3, [pc, #424]	@ (800228c <AesEncrypt_C+0x37c>)
 80020e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ea:	0c1b      	lsrs	r3, r3, #16
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	4967      	ldr	r1, [pc, #412]	@ (800228c <AesEncrypt_C+0x37c>)
 80020f0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80020f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80020f8:	405a      	eors	r2, r3
 80020fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020fc:	0a1b      	lsrs	r3, r3, #8
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	4962      	ldr	r1, [pc, #392]	@ (800228c <AesEncrypt_C+0x37c>)
 8002102:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002106:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800210a:	405a      	eors	r2, r3
 800210c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210e:	b2db      	uxtb	r3, r3
 8002110:	495e      	ldr	r1, [pc, #376]	@ (800228c <AesEncrypt_C+0x37c>)
 8002112:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002116:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800211a:	405a      	eors	r2, r3
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	3320      	adds	r3, #32
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4053      	eors	r3, r2
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002128:	0e1b      	lsrs	r3, r3, #24
 800212a:	b2db      	uxtb	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	4b57      	ldr	r3, [pc, #348]	@ (800228c <AesEncrypt_C+0x37c>)
 8002130:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002136:	0c1b      	lsrs	r3, r3, #16
 8002138:	b2db      	uxtb	r3, r3
 800213a:	4954      	ldr	r1, [pc, #336]	@ (800228c <AesEncrypt_C+0x37c>)
 800213c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002140:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002144:	405a      	eors	r2, r3
 8002146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	b2db      	uxtb	r3, r3
 800214c:	494f      	ldr	r1, [pc, #316]	@ (800228c <AesEncrypt_C+0x37c>)
 800214e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002152:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002156:	405a      	eors	r2, r3
 8002158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800215a:	b2db      	uxtb	r3, r3
 800215c:	494b      	ldr	r1, [pc, #300]	@ (800228c <AesEncrypt_C+0x37c>)
 800215e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002162:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002166:	405a      	eors	r2, r3
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	3324      	adds	r3, #36	@ 0x24
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4053      	eors	r3, r2
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002174:	0e1b      	lsrs	r3, r3, #24
 8002176:	b2db      	uxtb	r3, r3
 8002178:	461a      	mov	r2, r3
 800217a:	4b44      	ldr	r3, [pc, #272]	@ (800228c <AesEncrypt_C+0x37c>)
 800217c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002182:	0c1b      	lsrs	r3, r3, #16
 8002184:	b2db      	uxtb	r3, r3
 8002186:	4941      	ldr	r1, [pc, #260]	@ (800228c <AesEncrypt_C+0x37c>)
 8002188:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800218c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002190:	405a      	eors	r2, r3
 8002192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002194:	0a1b      	lsrs	r3, r3, #8
 8002196:	b2db      	uxtb	r3, r3
 8002198:	493c      	ldr	r1, [pc, #240]	@ (800228c <AesEncrypt_C+0x37c>)
 800219a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800219e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021a2:	405a      	eors	r2, r3
 80021a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4938      	ldr	r1, [pc, #224]	@ (800228c <AesEncrypt_C+0x37c>)
 80021aa:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80021ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021b2:	405a      	eors	r2, r3
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	3328      	adds	r3, #40	@ 0x28
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4053      	eors	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c0:	0e1b      	lsrs	r3, r3, #24
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b31      	ldr	r3, [pc, #196]	@ (800228c <AesEncrypt_C+0x37c>)
 80021c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ce:	0c1b      	lsrs	r3, r3, #16
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	492e      	ldr	r1, [pc, #184]	@ (800228c <AesEncrypt_C+0x37c>)
 80021d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80021d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021dc:	405a      	eors	r2, r3
 80021de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e0:	0a1b      	lsrs	r3, r3, #8
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4929      	ldr	r1, [pc, #164]	@ (800228c <AesEncrypt_C+0x37c>)
 80021e6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80021ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021ee:	405a      	eors	r2, r3
 80021f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4925      	ldr	r1, [pc, #148]	@ (800228c <AesEncrypt_C+0x37c>)
 80021f6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80021fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80021fe:	405a      	eors	r2, r3
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	332c      	adds	r3, #44	@ 0x2c
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4053      	eors	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	0e1b      	lsrs	r3, r3, #24
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <AesEncrypt_C+0x37c>)
 8002214:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	0c1b      	lsrs	r3, r3, #16
 800221c:	b2db      	uxtb	r3, r3
 800221e:	491b      	ldr	r1, [pc, #108]	@ (800228c <AesEncrypt_C+0x37c>)
 8002220:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002224:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002228:	405a      	eors	r2, r3
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	b2db      	uxtb	r3, r3
 8002230:	4916      	ldr	r1, [pc, #88]	@ (800228c <AesEncrypt_C+0x37c>)
 8002232:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800223a:	405a      	eors	r2, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4912      	ldr	r1, [pc, #72]	@ (800228c <AesEncrypt_C+0x37c>)
 8002242:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002246:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800224a:	405a      	eors	r2, r3
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	3330      	adds	r3, #48	@ 0x30
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4053      	eors	r3, r2
 8002254:	637b      	str	r3, [r7, #52]	@ 0x34
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	0e1b      	lsrs	r3, r3, #24
 800225a:	b2db      	uxtb	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	4b0b      	ldr	r3, [pc, #44]	@ (800228c <AesEncrypt_C+0x37c>)
 8002260:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	0c1b      	lsrs	r3, r3, #16
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4908      	ldr	r1, [pc, #32]	@ (800228c <AesEncrypt_C+0x37c>)
 800226c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002270:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002274:	405a      	eors	r2, r3
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	0a1b      	lsrs	r3, r3, #8
 800227a:	b2db      	uxtb	r3, r3
 800227c:	4903      	ldr	r1, [pc, #12]	@ (800228c <AesEncrypt_C+0x37c>)
 800227e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002282:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002286:	405a      	eors	r2, r3
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	e001      	b.n	8002290 <AesEncrypt_C+0x380>
 800228c:	08004e70 	.word	0x08004e70
 8002290:	b2db      	uxtb	r3, r3
 8002292:	49b6      	ldr	r1, [pc, #728]	@ (800256c <AesEncrypt_C+0x65c>)
 8002294:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002298:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800229c:	405a      	eors	r2, r3
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	3334      	adds	r3, #52	@ 0x34
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4053      	eors	r3, r2
 80022a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	0e1b      	lsrs	r3, r3, #24
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	4bae      	ldr	r3, [pc, #696]	@ (800256c <AesEncrypt_C+0x65c>)
 80022b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	0c1b      	lsrs	r3, r3, #16
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	49ab      	ldr	r1, [pc, #684]	@ (800256c <AesEncrypt_C+0x65c>)
 80022be:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80022c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022c6:	405a      	eors	r2, r3
 80022c8:	6a3b      	ldr	r3, [r7, #32]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	49a7      	ldr	r1, [pc, #668]	@ (800256c <AesEncrypt_C+0x65c>)
 80022d0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80022d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022d8:	405a      	eors	r2, r3
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	49a3      	ldr	r1, [pc, #652]	@ (800256c <AesEncrypt_C+0x65c>)
 80022e0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80022e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80022e8:	405a      	eors	r2, r3
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	3338      	adds	r3, #56	@ 0x38
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4053      	eors	r3, r2
 80022f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	0e1b      	lsrs	r3, r3, #24
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b9b      	ldr	r3, [pc, #620]	@ (800256c <AesEncrypt_C+0x65c>)
 80022fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	0c1b      	lsrs	r3, r3, #16
 8002306:	b2db      	uxtb	r3, r3
 8002308:	4998      	ldr	r1, [pc, #608]	@ (800256c <AesEncrypt_C+0x65c>)
 800230a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800230e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002312:	405a      	eors	r2, r3
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4994      	ldr	r1, [pc, #592]	@ (800256c <AesEncrypt_C+0x65c>)
 800231c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002320:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002324:	405a      	eors	r2, r3
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	4990      	ldr	r1, [pc, #576]	@ (800256c <AesEncrypt_C+0x65c>)
 800232c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002330:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002334:	405a      	eors	r2, r3
 8002336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002338:	333c      	adds	r3, #60	@ 0x3c
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4053      	eors	r3, r2
 800233e:	62bb      	str	r3, [r7, #40]	@ 0x28
    ENC_ROUND_S_T(16); ENC_ROUND_T_S(16);
 8002340:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002342:	0e1b      	lsrs	r3, r3, #24
 8002344:	b2db      	uxtb	r3, r3
 8002346:	461a      	mov	r2, r3
 8002348:	4b88      	ldr	r3, [pc, #544]	@ (800256c <AesEncrypt_C+0x65c>)
 800234a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800234e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	b2db      	uxtb	r3, r3
 8002354:	4985      	ldr	r1, [pc, #532]	@ (800256c <AesEncrypt_C+0x65c>)
 8002356:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800235a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800235e:	405a      	eors	r2, r3
 8002360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002362:	0a1b      	lsrs	r3, r3, #8
 8002364:	b2db      	uxtb	r3, r3
 8002366:	4981      	ldr	r1, [pc, #516]	@ (800256c <AesEncrypt_C+0x65c>)
 8002368:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800236c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002370:	405a      	eors	r2, r3
 8002372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002374:	b2db      	uxtb	r3, r3
 8002376:	497d      	ldr	r1, [pc, #500]	@ (800256c <AesEncrypt_C+0x65c>)
 8002378:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800237c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002380:	405a      	eors	r2, r3
 8002382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002384:	3340      	adds	r3, #64	@ 0x40
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4053      	eors	r3, r2
 800238a:	623b      	str	r3, [r7, #32]
 800238c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800238e:	0e1b      	lsrs	r3, r3, #24
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	4b75      	ldr	r3, [pc, #468]	@ (800256c <AesEncrypt_C+0x65c>)
 8002396:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800239a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239c:	0c1b      	lsrs	r3, r3, #16
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	4972      	ldr	r1, [pc, #456]	@ (800256c <AesEncrypt_C+0x65c>)
 80023a2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80023a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023aa:	405a      	eors	r2, r3
 80023ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	496e      	ldr	r1, [pc, #440]	@ (800256c <AesEncrypt_C+0x65c>)
 80023b4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80023b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023bc:	405a      	eors	r2, r3
 80023be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	496a      	ldr	r1, [pc, #424]	@ (800256c <AesEncrypt_C+0x65c>)
 80023c4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80023c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023cc:	405a      	eors	r2, r3
 80023ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d0:	3344      	adds	r3, #68	@ 0x44
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4053      	eors	r3, r2
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023da:	0e1b      	lsrs	r3, r3, #24
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	4b62      	ldr	r3, [pc, #392]	@ (800256c <AesEncrypt_C+0x65c>)
 80023e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e8:	0c1b      	lsrs	r3, r3, #16
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	495f      	ldr	r1, [pc, #380]	@ (800256c <AesEncrypt_C+0x65c>)
 80023ee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80023f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023f6:	405a      	eors	r2, r3
 80023f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	495b      	ldr	r1, [pc, #364]	@ (800256c <AesEncrypt_C+0x65c>)
 8002400:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002404:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002408:	405a      	eors	r2, r3
 800240a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240c:	b2db      	uxtb	r3, r3
 800240e:	4957      	ldr	r1, [pc, #348]	@ (800256c <AesEncrypt_C+0x65c>)
 8002410:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002414:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002418:	405a      	eors	r2, r3
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	3348      	adds	r3, #72	@ 0x48
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4053      	eors	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002426:	0e1b      	lsrs	r3, r3, #24
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	4b4f      	ldr	r3, [pc, #316]	@ (800256c <AesEncrypt_C+0x65c>)
 800242e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002434:	0c1b      	lsrs	r3, r3, #16
 8002436:	b2db      	uxtb	r3, r3
 8002438:	494c      	ldr	r1, [pc, #304]	@ (800256c <AesEncrypt_C+0x65c>)
 800243a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800243e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002442:	405a      	eors	r2, r3
 8002444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	b2db      	uxtb	r3, r3
 800244a:	4948      	ldr	r1, [pc, #288]	@ (800256c <AesEncrypt_C+0x65c>)
 800244c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002450:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002454:	405a      	eors	r2, r3
 8002456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4944      	ldr	r1, [pc, #272]	@ (800256c <AesEncrypt_C+0x65c>)
 800245c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002460:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002464:	405a      	eors	r2, r3
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	334c      	adds	r3, #76	@ 0x4c
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4053      	eors	r3, r2
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	0e1b      	lsrs	r3, r3, #24
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	4b3c      	ldr	r3, [pc, #240]	@ (800256c <AesEncrypt_C+0x65c>)
 800247a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	0c1b      	lsrs	r3, r3, #16
 8002482:	b2db      	uxtb	r3, r3
 8002484:	4939      	ldr	r1, [pc, #228]	@ (800256c <AesEncrypt_C+0x65c>)
 8002486:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800248a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800248e:	405a      	eors	r2, r3
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	0a1b      	lsrs	r3, r3, #8
 8002494:	b2db      	uxtb	r3, r3
 8002496:	4935      	ldr	r1, [pc, #212]	@ (800256c <AesEncrypt_C+0x65c>)
 8002498:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800249c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024a0:	405a      	eors	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	4931      	ldr	r1, [pc, #196]	@ (800256c <AesEncrypt_C+0x65c>)
 80024a8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80024ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024b0:	405a      	eors	r2, r3
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	3350      	adds	r3, #80	@ 0x50
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4053      	eors	r3, r2
 80024ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	0e1b      	lsrs	r3, r3, #24
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b29      	ldr	r3, [pc, #164]	@ (800256c <AesEncrypt_C+0x65c>)
 80024c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	0c1b      	lsrs	r3, r3, #16
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	4926      	ldr	r1, [pc, #152]	@ (800256c <AesEncrypt_C+0x65c>)
 80024d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80024d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024da:	405a      	eors	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	4922      	ldr	r1, [pc, #136]	@ (800256c <AesEncrypt_C+0x65c>)
 80024e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80024e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024ec:	405a      	eors	r2, r3
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	491e      	ldr	r1, [pc, #120]	@ (800256c <AesEncrypt_C+0x65c>)
 80024f4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80024f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024fc:	405a      	eors	r2, r3
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	3354      	adds	r3, #84	@ 0x54
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4053      	eors	r3, r2
 8002506:	633b      	str	r3, [r7, #48]	@ 0x30
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	0e1b      	lsrs	r3, r3, #24
 800250c:	b2db      	uxtb	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	4b16      	ldr	r3, [pc, #88]	@ (800256c <AesEncrypt_C+0x65c>)
 8002512:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	0c1b      	lsrs	r3, r3, #16
 800251a:	b2db      	uxtb	r3, r3
 800251c:	4913      	ldr	r1, [pc, #76]	@ (800256c <AesEncrypt_C+0x65c>)
 800251e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002522:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002526:	405a      	eors	r2, r3
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	b2db      	uxtb	r3, r3
 800252e:	490f      	ldr	r1, [pc, #60]	@ (800256c <AesEncrypt_C+0x65c>)
 8002530:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002534:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002538:	405a      	eors	r2, r3
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	490b      	ldr	r1, [pc, #44]	@ (800256c <AesEncrypt_C+0x65c>)
 8002540:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002544:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002548:	405a      	eors	r2, r3
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	3358      	adds	r3, #88	@ 0x58
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4053      	eors	r3, r2
 8002552:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	0e1b      	lsrs	r3, r3, #24
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	4b03      	ldr	r3, [pc, #12]	@ (800256c <AesEncrypt_C+0x65c>)
 800255e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	0c1b      	lsrs	r3, r3, #16
 8002566:	b2db      	uxtb	r3, r3
 8002568:	e002      	b.n	8002570 <AesEncrypt_C+0x660>
 800256a:	bf00      	nop
 800256c:	08004e70 	.word	0x08004e70
 8002570:	49b6      	ldr	r1, [pc, #728]	@ (800284c <AesEncrypt_C+0x93c>)
 8002572:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002576:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800257a:	405a      	eors	r2, r3
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	b2db      	uxtb	r3, r3
 8002582:	49b2      	ldr	r1, [pc, #712]	@ (800284c <AesEncrypt_C+0x93c>)
 8002584:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002588:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800258c:	405a      	eors	r2, r3
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	49ae      	ldr	r1, [pc, #696]	@ (800284c <AesEncrypt_C+0x93c>)
 8002594:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002598:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800259c:	405a      	eors	r2, r3
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	335c      	adds	r3, #92	@ 0x5c
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4053      	eors	r3, r2
 80025a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    ENC_ROUND_S_T(24); ENC_ROUND_T_S(24);
 80025a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025aa:	0e1b      	lsrs	r3, r3, #24
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	4ba6      	ldr	r3, [pc, #664]	@ (800284c <AesEncrypt_C+0x93c>)
 80025b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80025b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	49a3      	ldr	r1, [pc, #652]	@ (800284c <AesEncrypt_C+0x93c>)
 80025be:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80025c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025c6:	405a      	eors	r2, r3
 80025c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	499f      	ldr	r1, [pc, #636]	@ (800284c <AesEncrypt_C+0x93c>)
 80025d0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80025d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025d8:	405a      	eors	r2, r3
 80025da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	499b      	ldr	r1, [pc, #620]	@ (800284c <AesEncrypt_C+0x93c>)
 80025e0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80025e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025e8:	405a      	eors	r2, r3
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	3360      	adds	r3, #96	@ 0x60
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4053      	eors	r3, r2
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f6:	0e1b      	lsrs	r3, r3, #24
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
 80025fc:	4b93      	ldr	r3, [pc, #588]	@ (800284c <AesEncrypt_C+0x93c>)
 80025fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	b2db      	uxtb	r3, r3
 8002608:	4990      	ldr	r1, [pc, #576]	@ (800284c <AesEncrypt_C+0x93c>)
 800260a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800260e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002612:	405a      	eors	r2, r3
 8002614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	b2db      	uxtb	r3, r3
 800261a:	498c      	ldr	r1, [pc, #560]	@ (800284c <AesEncrypt_C+0x93c>)
 800261c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002620:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002624:	405a      	eors	r2, r3
 8002626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002628:	b2db      	uxtb	r3, r3
 800262a:	4988      	ldr	r1, [pc, #544]	@ (800284c <AesEncrypt_C+0x93c>)
 800262c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002630:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002634:	405a      	eors	r2, r3
 8002636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002638:	3364      	adds	r3, #100	@ 0x64
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4053      	eors	r3, r2
 800263e:	61fb      	str	r3, [r7, #28]
 8002640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002642:	0e1b      	lsrs	r3, r3, #24
 8002644:	b2db      	uxtb	r3, r3
 8002646:	461a      	mov	r2, r3
 8002648:	4b80      	ldr	r3, [pc, #512]	@ (800284c <AesEncrypt_C+0x93c>)
 800264a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	0c1b      	lsrs	r3, r3, #16
 8002652:	b2db      	uxtb	r3, r3
 8002654:	497d      	ldr	r1, [pc, #500]	@ (800284c <AesEncrypt_C+0x93c>)
 8002656:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800265a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800265e:	405a      	eors	r2, r3
 8002660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002662:	0a1b      	lsrs	r3, r3, #8
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4979      	ldr	r1, [pc, #484]	@ (800284c <AesEncrypt_C+0x93c>)
 8002668:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800266c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002670:	405a      	eors	r2, r3
 8002672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002674:	b2db      	uxtb	r3, r3
 8002676:	4975      	ldr	r1, [pc, #468]	@ (800284c <AesEncrypt_C+0x93c>)
 8002678:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800267c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002680:	405a      	eors	r2, r3
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	3368      	adds	r3, #104	@ 0x68
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4053      	eors	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268e:	0e1b      	lsrs	r3, r3, #24
 8002690:	b2db      	uxtb	r3, r3
 8002692:	461a      	mov	r2, r3
 8002694:	4b6d      	ldr	r3, [pc, #436]	@ (800284c <AesEncrypt_C+0x93c>)
 8002696:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800269a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800269c:	0c1b      	lsrs	r3, r3, #16
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	496a      	ldr	r1, [pc, #424]	@ (800284c <AesEncrypt_C+0x93c>)
 80026a2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80026a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026aa:	405a      	eors	r2, r3
 80026ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	4966      	ldr	r1, [pc, #408]	@ (800284c <AesEncrypt_C+0x93c>)
 80026b4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80026b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026bc:	405a      	eors	r2, r3
 80026be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	4962      	ldr	r1, [pc, #392]	@ (800284c <AesEncrypt_C+0x93c>)
 80026c4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80026c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026cc:	405a      	eors	r2, r3
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	336c      	adds	r3, #108	@ 0x6c
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4053      	eors	r3, r2
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	0e1b      	lsrs	r3, r3, #24
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	461a      	mov	r2, r3
 80026e0:	4b5a      	ldr	r3, [pc, #360]	@ (800284c <AesEncrypt_C+0x93c>)
 80026e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	0c1b      	lsrs	r3, r3, #16
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4957      	ldr	r1, [pc, #348]	@ (800284c <AesEncrypt_C+0x93c>)
 80026ee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80026f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80026f6:	405a      	eors	r2, r3
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	4953      	ldr	r1, [pc, #332]	@ (800284c <AesEncrypt_C+0x93c>)
 8002700:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002704:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002708:	405a      	eors	r2, r3
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	b2db      	uxtb	r3, r3
 800270e:	494f      	ldr	r1, [pc, #316]	@ (800284c <AesEncrypt_C+0x93c>)
 8002710:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002714:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002718:	405a      	eors	r2, r3
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	3370      	adds	r3, #112	@ 0x70
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4053      	eors	r3, r2
 8002722:	637b      	str	r3, [r7, #52]	@ 0x34
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	0e1b      	lsrs	r3, r3, #24
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
 800272c:	4b47      	ldr	r3, [pc, #284]	@ (800284c <AesEncrypt_C+0x93c>)
 800272e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	b2db      	uxtb	r3, r3
 8002738:	4944      	ldr	r1, [pc, #272]	@ (800284c <AesEncrypt_C+0x93c>)
 800273a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800273e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002742:	405a      	eors	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	b2db      	uxtb	r3, r3
 800274a:	4940      	ldr	r1, [pc, #256]	@ (800284c <AesEncrypt_C+0x93c>)
 800274c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002750:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002754:	405a      	eors	r2, r3
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	493c      	ldr	r1, [pc, #240]	@ (800284c <AesEncrypt_C+0x93c>)
 800275c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002760:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002764:	405a      	eors	r2, r3
 8002766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002768:	3374      	adds	r3, #116	@ 0x74
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4053      	eors	r3, r2
 800276e:	633b      	str	r3, [r7, #48]	@ 0x30
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	0e1b      	lsrs	r3, r3, #24
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	4b34      	ldr	r3, [pc, #208]	@ (800284c <AesEncrypt_C+0x93c>)
 800277a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	b2db      	uxtb	r3, r3
 8002784:	4931      	ldr	r1, [pc, #196]	@ (800284c <AesEncrypt_C+0x93c>)
 8002786:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800278a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800278e:	405a      	eors	r2, r3
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	b2db      	uxtb	r3, r3
 8002796:	492d      	ldr	r1, [pc, #180]	@ (800284c <AesEncrypt_C+0x93c>)
 8002798:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800279c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027a0:	405a      	eors	r2, r3
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	4929      	ldr	r1, [pc, #164]	@ (800284c <AesEncrypt_C+0x93c>)
 80027a8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80027ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027b0:	405a      	eors	r2, r3
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	3378      	adds	r3, #120	@ 0x78
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4053      	eors	r3, r2
 80027ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	0e1b      	lsrs	r3, r3, #24
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b21      	ldr	r3, [pc, #132]	@ (800284c <AesEncrypt_C+0x93c>)
 80027c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	491e      	ldr	r1, [pc, #120]	@ (800284c <AesEncrypt_C+0x93c>)
 80027d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80027d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027da:	405a      	eors	r2, r3
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	0a1b      	lsrs	r3, r3, #8
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	491a      	ldr	r1, [pc, #104]	@ (800284c <AesEncrypt_C+0x93c>)
 80027e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80027e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027ec:	405a      	eors	r2, r3
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	4916      	ldr	r1, [pc, #88]	@ (800284c <AesEncrypt_C+0x93c>)
 80027f4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80027f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027fc:	405a      	eors	r2, r3
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	337c      	adds	r3, #124	@ 0x7c
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4053      	eors	r3, r2
 8002806:	62bb      	str	r3, [r7, #40]	@ 0x28
    ENC_ROUND_S_T(32); ENC_ROUND_T_S(32);
 8002808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800280a:	0e1b      	lsrs	r3, r3, #24
 800280c:	b2db      	uxtb	r3, r3
 800280e:	461a      	mov	r2, r3
 8002810:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <AesEncrypt_C+0x93c>)
 8002812:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	b2db      	uxtb	r3, r3
 800281c:	490b      	ldr	r1, [pc, #44]	@ (800284c <AesEncrypt_C+0x93c>)
 800281e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002822:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002826:	405a      	eors	r2, r3
 8002828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	b2db      	uxtb	r3, r3
 800282e:	4907      	ldr	r1, [pc, #28]	@ (800284c <AesEncrypt_C+0x93c>)
 8002830:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002834:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002838:	405a      	eors	r2, r3
 800283a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4903      	ldr	r1, [pc, #12]	@ (800284c <AesEncrypt_C+0x93c>)
 8002840:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002844:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002848:	405a      	eors	r2, r3
 800284a:	e001      	b.n	8002850 <AesEncrypt_C+0x940>
 800284c:	08004e70 	.word	0x08004e70
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	3380      	adds	r3, #128	@ 0x80
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4053      	eors	r3, r2
 8002858:	623b      	str	r3, [r7, #32]
 800285a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285c:	0e1b      	lsrs	r3, r3, #24
 800285e:	b2db      	uxtb	r3, r3
 8002860:	461a      	mov	r2, r3
 8002862:	4bb6      	ldr	r3, [pc, #728]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002864:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800286a:	0c1b      	lsrs	r3, r3, #16
 800286c:	b2db      	uxtb	r3, r3
 800286e:	49b3      	ldr	r1, [pc, #716]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002870:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002874:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002878:	405a      	eors	r2, r3
 800287a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	b2db      	uxtb	r3, r3
 8002880:	49ae      	ldr	r1, [pc, #696]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002882:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002886:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800288a:	405a      	eors	r2, r3
 800288c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800288e:	b2db      	uxtb	r3, r3
 8002890:	49aa      	ldr	r1, [pc, #680]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002892:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002896:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800289a:	405a      	eors	r2, r3
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	3384      	adds	r3, #132	@ 0x84
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4053      	eors	r3, r2
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a8:	0e1b      	lsrs	r3, r3, #24
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
 80028ae:	4ba3      	ldr	r3, [pc, #652]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 80028b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80028b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b6:	0c1b      	lsrs	r3, r3, #16
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	49a0      	ldr	r1, [pc, #640]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 80028bc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80028c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028c4:	405a      	eors	r2, r3
 80028c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028c8:	0a1b      	lsrs	r3, r3, #8
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	499b      	ldr	r1, [pc, #620]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 80028ce:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80028d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028d6:	405a      	eors	r2, r3
 80028d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	4997      	ldr	r1, [pc, #604]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 80028de:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80028e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80028e6:	405a      	eors	r2, r3
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	3388      	adds	r3, #136	@ 0x88
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4053      	eors	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
 80028f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f4:	0e1b      	lsrs	r3, r3, #24
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b90      	ldr	r3, [pc, #576]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 80028fc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002902:	0c1b      	lsrs	r3, r3, #16
 8002904:	b2db      	uxtb	r3, r3
 8002906:	498d      	ldr	r1, [pc, #564]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002908:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800290c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002910:	405a      	eors	r2, r3
 8002912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4988      	ldr	r1, [pc, #544]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 800291a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800291e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002922:	405a      	eors	r2, r3
 8002924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002926:	b2db      	uxtb	r3, r3
 8002928:	4984      	ldr	r1, [pc, #528]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 800292a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800292e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002932:	405a      	eors	r2, r3
 8002934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002936:	338c      	adds	r3, #140	@ 0x8c
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4053      	eors	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	0e1b      	lsrs	r3, r3, #24
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	4b7d      	ldr	r3, [pc, #500]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002948:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	0c1b      	lsrs	r3, r3, #16
 8002950:	b2db      	uxtb	r3, r3
 8002952:	497a      	ldr	r1, [pc, #488]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002954:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002958:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800295c:	405a      	eors	r2, r3
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	0a1b      	lsrs	r3, r3, #8
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4975      	ldr	r1, [pc, #468]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002966:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800296a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800296e:	405a      	eors	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	4971      	ldr	r1, [pc, #452]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002976:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800297a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800297e:	405a      	eors	r2, r3
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	3390      	adds	r3, #144	@ 0x90
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4053      	eors	r3, r2
 8002988:	637b      	str	r3, [r7, #52]	@ 0x34
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	0e1b      	lsrs	r3, r3, #24
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	4b6a      	ldr	r3, [pc, #424]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002994:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	0c1b      	lsrs	r3, r3, #16
 800299c:	b2db      	uxtb	r3, r3
 800299e:	4967      	ldr	r1, [pc, #412]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 80029a0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80029a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029a8:	405a      	eors	r2, r3
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	4962      	ldr	r1, [pc, #392]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 80029b2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80029b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029ba:	405a      	eors	r2, r3
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	495e      	ldr	r1, [pc, #376]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 80029c2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80029c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029ca:	405a      	eors	r2, r3
 80029cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ce:	3394      	adds	r3, #148	@ 0x94
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4053      	eors	r3, r2
 80029d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	0e1b      	lsrs	r3, r3, #24
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	4b57      	ldr	r3, [pc, #348]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 80029e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	0c1b      	lsrs	r3, r3, #16
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	4954      	ldr	r1, [pc, #336]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 80029ec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80029f0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80029f4:	405a      	eors	r2, r3
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	0a1b      	lsrs	r3, r3, #8
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	494f      	ldr	r1, [pc, #316]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 80029fe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002a02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a06:	405a      	eors	r2, r3
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	494b      	ldr	r1, [pc, #300]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002a0e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002a12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a16:	405a      	eors	r2, r3
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	3398      	adds	r3, #152	@ 0x98
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4053      	eors	r3, r2
 8002a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	0e1b      	lsrs	r3, r3, #24
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b44      	ldr	r3, [pc, #272]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002a2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	0c1b      	lsrs	r3, r3, #16
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	4941      	ldr	r1, [pc, #260]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002a38:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002a3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a40:	405a      	eors	r2, r3
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	0a1b      	lsrs	r3, r3, #8
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	493c      	ldr	r1, [pc, #240]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002a4a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002a4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a52:	405a      	eors	r2, r3
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4938      	ldr	r1, [pc, #224]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002a5a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002a5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a62:	405a      	eors	r2, r3
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	339c      	adds	r3, #156	@ 0x9c
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4053      	eors	r3, r2
 8002a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (r > 5) {
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b05      	cmp	r3, #5
 8002a72:	f240 826a 	bls.w	8002f4a <AesEncrypt_C+0x103a>
        ENC_ROUND_S_T(40); ENC_ROUND_T_S(40);
 8002a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a78:	0e1b      	lsrs	r3, r3, #24
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002a80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a86:	0c1b      	lsrs	r3, r3, #16
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	492c      	ldr	r1, [pc, #176]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002a8c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002a90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002a94:	405a      	eors	r2, r3
 8002a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4927      	ldr	r1, [pc, #156]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002a9e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002aa2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002aa6:	405a      	eors	r2, r3
 8002aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	4923      	ldr	r1, [pc, #140]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002aae:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002ab2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ab6:	405a      	eors	r2, r3
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	33a0      	adds	r3, #160	@ 0xa0
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4053      	eors	r3, r2
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac4:	0e1b      	lsrs	r3, r3, #24
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4b1c      	ldr	r3, [pc, #112]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002acc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4919      	ldr	r1, [pc, #100]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002ad8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002adc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ae0:	405a      	eors	r2, r3
 8002ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	4914      	ldr	r1, [pc, #80]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002aea:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002aee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002af2:	405a      	eors	r2, r3
 8002af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	4910      	ldr	r1, [pc, #64]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002afa:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002afe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b02:	405a      	eors	r2, r3
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	33a4      	adds	r3, #164	@ 0xa4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4053      	eors	r3, r2
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b10:	0e1b      	lsrs	r3, r3, #24
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b09      	ldr	r3, [pc, #36]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002b18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	4906      	ldr	r1, [pc, #24]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002b24:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002b28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b2c:	405a      	eors	r2, r3
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	4901      	ldr	r1, [pc, #4]	@ (8002b3c <AesEncrypt_C+0xc2c>)
 8002b36:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002b3a:	e001      	b.n	8002b40 <AesEncrypt_C+0xc30>
 8002b3c:	08004e70 	.word	0x08004e70
 8002b40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b44:	405a      	eors	r2, r3
 8002b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	49b6      	ldr	r1, [pc, #728]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002b4c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002b50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b54:	405a      	eors	r2, r3
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	33a8      	adds	r3, #168	@ 0xa8
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4053      	eors	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
 8002b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b62:	0e1b      	lsrs	r3, r3, #24
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	461a      	mov	r2, r3
 8002b68:	4bae      	ldr	r3, [pc, #696]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002b6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b70:	0c1b      	lsrs	r3, r3, #16
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	49ab      	ldr	r1, [pc, #684]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002b76:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002b7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b7e:	405a      	eors	r2, r3
 8002b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	49a7      	ldr	r1, [pc, #668]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002b88:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002b8c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b90:	405a      	eors	r2, r3
 8002b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	49a3      	ldr	r1, [pc, #652]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002b98:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002b9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ba0:	405a      	eors	r2, r3
 8002ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba4:	33ac      	adds	r3, #172	@ 0xac
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4053      	eors	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	0e1b      	lsrs	r3, r3, #24
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b9b      	ldr	r3, [pc, #620]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002bb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	0c1b      	lsrs	r3, r3, #16
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	4998      	ldr	r1, [pc, #608]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002bc2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002bc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bca:	405a      	eors	r2, r3
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	0a1b      	lsrs	r3, r3, #8
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	4994      	ldr	r1, [pc, #592]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002bd4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002bd8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bdc:	405a      	eors	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	4990      	ldr	r1, [pc, #576]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002be4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002be8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bec:	405a      	eors	r2, r3
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	33b0      	adds	r3, #176	@ 0xb0
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4053      	eors	r3, r2
 8002bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	0e1b      	lsrs	r3, r3, #24
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b88      	ldr	r3, [pc, #544]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002c02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	4985      	ldr	r1, [pc, #532]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002c0e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002c12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c16:	405a      	eors	r2, r3
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	0a1b      	lsrs	r3, r3, #8
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	4981      	ldr	r1, [pc, #516]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002c20:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002c24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c28:	405a      	eors	r2, r3
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	497d      	ldr	r1, [pc, #500]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002c30:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002c34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c38:	405a      	eors	r2, r3
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3c:	33b4      	adds	r3, #180	@ 0xb4
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4053      	eors	r3, r2
 8002c42:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	0e1b      	lsrs	r3, r3, #24
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b75      	ldr	r3, [pc, #468]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002c4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	4972      	ldr	r1, [pc, #456]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002c5a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002c5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c62:	405a      	eors	r2, r3
 8002c64:	6a3b      	ldr	r3, [r7, #32]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	496e      	ldr	r1, [pc, #440]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002c6c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002c70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c74:	405a      	eors	r2, r3
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	496a      	ldr	r1, [pc, #424]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002c7c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002c80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002c84:	405a      	eors	r2, r3
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	33b8      	adds	r3, #184	@ 0xb8
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4053      	eors	r3, r2
 8002c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	0e1b      	lsrs	r3, r3, #24
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	4b62      	ldr	r3, [pc, #392]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002c9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	495f      	ldr	r1, [pc, #380]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002ca6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002caa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cae:	405a      	eors	r2, r3
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	0a1b      	lsrs	r3, r3, #8
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	495b      	ldr	r1, [pc, #364]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002cb8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002cbc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cc0:	405a      	eors	r2, r3
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	4957      	ldr	r1, [pc, #348]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002cc8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002ccc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002cd0:	405a      	eors	r2, r3
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	33bc      	adds	r3, #188	@ 0xbc
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4053      	eors	r3, r2
 8002cda:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (r > 6) {
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	f240 8133 	bls.w	8002f4a <AesEncrypt_C+0x103a>
            ENC_ROUND_S_T(48); ENC_ROUND_T_S(48);
 8002ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce6:	0e1b      	lsrs	r3, r3, #24
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	461a      	mov	r2, r3
 8002cec:	4b4d      	ldr	r3, [pc, #308]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002cee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf4:	0c1b      	lsrs	r3, r3, #16
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	494a      	ldr	r1, [pc, #296]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002cfa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002cfe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d02:	405a      	eors	r2, r3
 8002d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d06:	0a1b      	lsrs	r3, r3, #8
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	4946      	ldr	r1, [pc, #280]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002d0c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002d10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d14:	405a      	eors	r2, r3
 8002d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	4942      	ldr	r1, [pc, #264]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002d1c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d24:	405a      	eors	r2, r3
 8002d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d28:	33c0      	adds	r3, #192	@ 0xc0
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4053      	eors	r3, r2
 8002d2e:	623b      	str	r3, [r7, #32]
 8002d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d32:	0e1b      	lsrs	r3, r3, #24
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	4b3a      	ldr	r3, [pc, #232]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002d3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d40:	0c1b      	lsrs	r3, r3, #16
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	4937      	ldr	r1, [pc, #220]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002d46:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d4e:	405a      	eors	r2, r3
 8002d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4933      	ldr	r1, [pc, #204]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002d58:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002d5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d60:	405a      	eors	r2, r3
 8002d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	492f      	ldr	r1, [pc, #188]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002d68:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002d6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d70:	405a      	eors	r2, r3
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	33c4      	adds	r3, #196	@ 0xc4
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4053      	eors	r3, r2
 8002d7a:	61fb      	str	r3, [r7, #28]
 8002d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7e:	0e1b      	lsrs	r3, r3, #24
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
 8002d84:	4b27      	ldr	r3, [pc, #156]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002d86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8c:	0c1b      	lsrs	r3, r3, #16
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	4924      	ldr	r1, [pc, #144]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002d92:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002d96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002d9a:	405a      	eors	r2, r3
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	4920      	ldr	r1, [pc, #128]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002da4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002da8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002dac:	405a      	eors	r2, r3
 8002dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	491c      	ldr	r1, [pc, #112]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002db4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002db8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002dbc:	405a      	eors	r2, r3
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	33c8      	adds	r3, #200	@ 0xc8
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4053      	eors	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dca:	0e1b      	lsrs	r3, r3, #24
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	461a      	mov	r2, r3
 8002dd0:	4b14      	ldr	r3, [pc, #80]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002dd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	4911      	ldr	r1, [pc, #68]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002dde:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002de2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002de6:	405a      	eors	r2, r3
 8002de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dea:	0a1b      	lsrs	r3, r3, #8
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	490d      	ldr	r1, [pc, #52]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002df0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002df4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002df8:	405a      	eors	r2, r3
 8002dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	4909      	ldr	r1, [pc, #36]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002e00:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002e04:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e08:	405a      	eors	r2, r3
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0c:	33cc      	adds	r3, #204	@ 0xcc
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4053      	eors	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	0e1b      	lsrs	r3, r3, #24
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	4b01      	ldr	r3, [pc, #4]	@ (8002e24 <AesEncrypt_C+0xf14>)
 8002e1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e22:	e001      	b.n	8002e28 <AesEncrypt_C+0xf18>
 8002e24:	08004e70 	.word	0x08004e70
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	0c1b      	lsrs	r3, r3, #16
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	49b8      	ldr	r1, [pc, #736]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002e30:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002e34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e38:	405a      	eors	r2, r3
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	0a1b      	lsrs	r3, r3, #8
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	49b3      	ldr	r1, [pc, #716]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002e42:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002e46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e4a:	405a      	eors	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	49af      	ldr	r1, [pc, #700]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002e52:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002e56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e5a:	405a      	eors	r2, r3
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5e:	33d0      	adds	r3, #208	@ 0xd0
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4053      	eors	r3, r2
 8002e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	0e1b      	lsrs	r3, r3, #24
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4ba8      	ldr	r3, [pc, #672]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002e70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	0c1b      	lsrs	r3, r3, #16
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	49a5      	ldr	r1, [pc, #660]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002e7c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002e80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e84:	405a      	eors	r2, r3
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	49a0      	ldr	r1, [pc, #640]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002e8e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002e92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002e96:	405a      	eors	r2, r3
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	499c      	ldr	r1, [pc, #624]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002e9e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002ea2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ea6:	405a      	eors	r2, r3
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	33d4      	adds	r3, #212	@ 0xd4
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4053      	eors	r3, r2
 8002eb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	0e1b      	lsrs	r3, r3, #24
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b95      	ldr	r3, [pc, #596]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002ebc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	4992      	ldr	r1, [pc, #584]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002ec8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ecc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ed0:	405a      	eors	r2, r3
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	0a1b      	lsrs	r3, r3, #8
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	498d      	ldr	r1, [pc, #564]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002eda:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002ede:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ee2:	405a      	eors	r2, r3
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	4989      	ldr	r1, [pc, #548]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002eea:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002eee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ef2:	405a      	eors	r2, r3
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef6:	33d8      	adds	r3, #216	@ 0xd8
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4053      	eors	r3, r2
 8002efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	0e1b      	lsrs	r3, r3, #24
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b82      	ldr	r3, [pc, #520]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002f08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002f0c:	6a3b      	ldr	r3, [r7, #32]
 8002f0e:	0c1b      	lsrs	r3, r3, #16
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	497f      	ldr	r1, [pc, #508]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002f14:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f1c:	405a      	eors	r2, r3
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	0a1b      	lsrs	r3, r3, #8
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	497a      	ldr	r1, [pc, #488]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002f26:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002f2a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f2e:	405a      	eors	r2, r3
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	4976      	ldr	r1, [pc, #472]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002f36:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002f3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f3e:	405a      	eors	r2, r3
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	33dc      	adds	r3, #220	@ 0xdc
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4053      	eors	r3, r2
 8002f48:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    }
    rk += r * 8;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	015b      	lsls	r3, r3, #5
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f50:	4413      	add	r3, r2
 8002f52:	627b      	str	r3, [r7, #36]	@ 0x24
     * map cipher state to byte array block:
     */

#ifndef WOLFSSL_AES_TOUCH_LINES
    s0 =
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
 8002f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f56:	0e1b      	lsrs	r3, r3, #24
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	4a6d      	ldr	r2, [pc, #436]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002f5c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f64:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 8002f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	4968      	ldr	r1, [pc, #416]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002f70:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002f74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002f78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
        (GetTable(Te[2], GETBYTE(t0, 3)) & 0xff000000) ^
 8002f7c:	431a      	orrs	r2, r3
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
 8002f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f80:	0a1b      	lsrs	r3, r3, #8
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	4619      	mov	r1, r3
 8002f86:	4b62      	ldr	r3, [pc, #392]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002f88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002f8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
        (GetTable(Te[3], GETBYTE(t1, 2)) & 0x00ff0000) ^
 8002f90:	405a      	eors	r2, r3
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8002f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	495e      	ldr	r1, [pc, #376]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002f98:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002f9c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fa0:	b2db      	uxtb	r3, r3
        (GetTable(Te[0], GETBYTE(t2, 1)) & 0x0000ff00) ^
 8002fa2:	405a      	eors	r2, r3
        rk[0];
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa6:	681b      	ldr	r3, [r3, #0]
        (GetTable(Te[1], GETBYTE(t3, 0)) & 0x000000ff) ^
 8002fa8:	4053      	eors	r3, r2
    s0 =
 8002faa:	623b      	str	r3, [r7, #32]
    s1 =
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8002fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fae:	0e1b      	lsrs	r3, r3, #24
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	4a57      	ldr	r2, [pc, #348]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002fb4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbc:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8002fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc2:	0c1b      	lsrs	r3, r3, #16
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	4952      	ldr	r1, [pc, #328]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002fc8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8002fcc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002fd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
        (GetTable(Te[2], GETBYTE(t1, 3)) & 0xff000000) ^
 8002fd4:	431a      	orrs	r2, r3
        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
 8002fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4b4c      	ldr	r3, [pc, #304]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002fe0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002fe4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
        (GetTable(Te[3], GETBYTE(t2, 2)) & 0x00ff0000) ^
 8002fe8:	405a      	eors	r2, r3
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8002fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	4948      	ldr	r1, [pc, #288]	@ (8003110 <AesEncrypt_C+0x1200>)
 8002ff0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ff4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002ff8:	b2db      	uxtb	r3, r3
        (GetTable(Te[0], GETBYTE(t3, 1)) & 0x0000ff00) ^
 8002ffa:	405a      	eors	r2, r3
        rk[1];
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	3304      	adds	r3, #4
 8003000:	681b      	ldr	r3, [r3, #0]
        (GetTable(Te[1], GETBYTE(t0, 0)) & 0x000000ff) ^
 8003002:	4053      	eors	r3, r2
    s1 =
 8003004:	61fb      	str	r3, [r7, #28]
    s2 =
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 8003006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003008:	0e1b      	lsrs	r3, r3, #24
 800300a:	b2db      	uxtb	r3, r3
 800300c:	4a40      	ldr	r2, [pc, #256]	@ (8003110 <AesEncrypt_C+0x1200>)
 800300e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003016:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 800301a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	b2db      	uxtb	r3, r3
 8003020:	493b      	ldr	r1, [pc, #236]	@ (8003110 <AesEncrypt_C+0x1200>)
 8003022:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003026:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800302a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
        (GetTable(Te[2], GETBYTE(t2, 3)) & 0xff000000) ^
 800302e:	431a      	orrs	r2, r3
        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
 8003030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003032:	0a1b      	lsrs	r3, r3, #8
 8003034:	b2db      	uxtb	r3, r3
 8003036:	4619      	mov	r1, r3
 8003038:	4b35      	ldr	r3, [pc, #212]	@ (8003110 <AesEncrypt_C+0x1200>)
 800303a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800303e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
        (GetTable(Te[3], GETBYTE(t3, 2)) & 0x00ff0000) ^
 8003042:	405a      	eors	r2, r3
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 8003044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003046:	b2db      	uxtb	r3, r3
 8003048:	4931      	ldr	r1, [pc, #196]	@ (8003110 <AesEncrypt_C+0x1200>)
 800304a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800304e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003052:	b2db      	uxtb	r3, r3
        (GetTable(Te[0], GETBYTE(t0, 1)) & 0x0000ff00) ^
 8003054:	405a      	eors	r2, r3
        rk[2];
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	3308      	adds	r3, #8
 800305a:	681b      	ldr	r3, [r3, #0]
        (GetTable(Te[1], GETBYTE(t1, 0)) & 0x000000ff) ^
 800305c:	4053      	eors	r3, r2
    s2 =
 800305e:	61bb      	str	r3, [r7, #24]
    s3 =
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	0e1b      	lsrs	r3, r3, #24
 8003064:	b2db      	uxtb	r3, r3
 8003066:	4a2a      	ldr	r2, [pc, #168]	@ (8003110 <AesEncrypt_C+0x1200>)
 8003068:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800306c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003070:	f003 427f 	and.w	r2, r3, #4278190080	@ 0xff000000
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
 8003074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003076:	0c1b      	lsrs	r3, r3, #16
 8003078:	b2db      	uxtb	r3, r3
 800307a:	4925      	ldr	r1, [pc, #148]	@ (8003110 <AesEncrypt_C+0x1200>)
 800307c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003080:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003084:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
        (GetTable(Te[2], GETBYTE(t3, 3)) & 0xff000000) ^
 8003088:	431a      	orrs	r2, r3
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
 800308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308c:	0a1b      	lsrs	r3, r3, #8
 800308e:	b2db      	uxtb	r3, r3
 8003090:	4619      	mov	r1, r3
 8003092:	4b1f      	ldr	r3, [pc, #124]	@ (8003110 <AesEncrypt_C+0x1200>)
 8003094:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003098:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
        (GetTable(Te[3], GETBYTE(t0, 2)) & 0x00ff0000) ^
 800309c:	405a      	eors	r2, r3
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 800309e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	491b      	ldr	r1, [pc, #108]	@ (8003110 <AesEncrypt_C+0x1200>)
 80030a4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80030a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80030ac:	b2db      	uxtb	r3, r3
        (GetTable(Te[0], GETBYTE(t1, 1)) & 0x0000ff00) ^
 80030ae:	405a      	eors	r2, r3
        rk[3];
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	330c      	adds	r3, #12
 80030b4:	681b      	ldr	r3, [r3, #0]
        (GetTable(Te[1], GETBYTE(t2, 0)) & 0x000000ff) ^
 80030b6:	4053      	eors	r3, r2
    s3 =
 80030b8:	617b      	str	r3, [r7, #20]
    s3 = t3 ^ rk[3];
#endif

    /* write out */
#ifdef LITTLE_ENDIAN_ORDER
    s0 = ByteReverseWord32(s0);
 80030ba:	6a3b      	ldr	r3, [r7, #32]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fe fe28 	bl	8001d12 <ByteReverseWord32>
 80030c2:	4603      	mov	r3, r0
 80030c4:	623b      	str	r3, [r7, #32]
    s1 = ByteReverseWord32(s1);
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fe22 	bl	8001d12 <ByteReverseWord32>
 80030ce:	4603      	mov	r3, r0
 80030d0:	61fb      	str	r3, [r7, #28]
    s2 = ByteReverseWord32(s2);
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe fe1c 	bl	8001d12 <ByteReverseWord32>
 80030da:	4603      	mov	r3, r0
 80030dc:	61bb      	str	r3, [r7, #24]
    s3 = ByteReverseWord32(s3);
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7fe fe16 	bl	8001d12 <ByteReverseWord32>
 80030e6:	4603      	mov	r3, r0
 80030e8:	617b      	str	r3, [r7, #20]
#endif

    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 80030ea:	6a3a      	ldr	r2, [r7, #32]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	601a      	str	r2, [r3, #0]
    XMEMCPY(outBlock +     sizeof(s0), &s1, sizeof(s1));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	3304      	adds	r3, #4
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	601a      	str	r2, [r3, #0]
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3308      	adds	r3, #8
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	601a      	str	r2, [r3, #0]
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	330c      	adds	r3, #12
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	601a      	str	r2, [r3, #0]
}
 8003108:	bf00      	nop
 800310a:	3738      	adds	r7, #56	@ 0x38
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	08004e70 	.word	0x08004e70

08003114 <wc_AesEncrypt>:

/* this section disabled with NO_AES_192 */
/* calling this one when missing NO_AES_192  */
static WARN_UNUSED_RESULT int wc_AesEncrypt(
    Aes* aes, const byte* inBlock, byte* outBlock)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
    word32 r;

    if (aes == NULL) {
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <wc_AesEncrypt+0x18>
        return BAD_FUNC_ARG;
 8003126:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 800312a:	e014      	b.n	8003156 <wc_AesEncrypt+0x42>
        if (ret < 0)
            return ret;
    }
#endif

    r = aes->rounds >> 1;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	617b      	str	r3, [r7, #20]

    if (r > 7 || r == 0) {
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b07      	cmp	r3, #7
 800313a:	d802      	bhi.n	8003142 <wc_AesEncrypt+0x2e>
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d102      	bne.n	8003148 <wc_AesEncrypt+0x34>
        WOLFSSL_ERROR_VERBOSE(KEYUSAGE_E);
        return KEYUSAGE_E;
 8003142:	f06f 03e1 	mvn.w	r3, #225	@ 0xe1
 8003146:	e006      	b.n	8003156 <wc_AesEncrypt+0x42>
                      aes->keylen);
    #endif
    }
#endif

    AesEncrypt_C(aes, inBlock, outBlock, r);
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68b9      	ldr	r1, [r7, #8]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7fe fede 	bl	8001f10 <AesEncrypt_C>

    return 0;
 8003154:	2300      	movs	r3, #0
} /* wc_AesEncrypt */
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
	...

08003160 <PreFetchTd>:
#ifndef WC_AES_BITSLICED
#ifndef WC_NO_CACHE_RESISTANT
#ifndef WOLFSSL_AES_SMALL_TABLES
/* load 4 Td Tables into cache by cache line stride */
static WARN_UNUSED_RESULT WC_INLINE word32 PreFetchTd(void)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
    word32 x = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
    int i,j;

    for (i = 0; i < 4; i++) {
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	e015      	b.n	800319c <PreFetchTd+0x3c>
        /* 256 elements, each one is 4 bytes */
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
 8003170:	2300      	movs	r3, #0
 8003172:	607b      	str	r3, [r7, #4]
 8003174:	e00c      	b.n	8003190 <PreFetchTd+0x30>
            x &= Td[i][j];
 8003176:	490e      	ldr	r1, [pc, #56]	@ (80031b0 <PreFetchTd+0x50>)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	021a      	lsls	r2, r3, #8
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4013      	ands	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]
        for (j = 0; j < 256; j += WC_CACHE_LINE_SZ/4) {
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3308      	adds	r3, #8
 800318e:	607b      	str	r3, [r7, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2bff      	cmp	r3, #255	@ 0xff
 8003194:	ddef      	ble.n	8003176 <PreFetchTd+0x16>
    for (i = 0; i < 4; i++) {
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	3301      	adds	r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	dde6      	ble.n	8003170 <PreFetchTd+0x10>
        }
    }
    return x;
 80031a2:	68fb      	ldr	r3, [r7, #12]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3714      	adds	r7, #20
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	08005e70 	.word	0x08005e70

080031b4 <PreFetchTd4>:
#endif /* !WOLFSSL_AES_SMALL_TABLES */

/* load Td Table4 into cache by cache line stride */
static WARN_UNUSED_RESULT WC_INLINE word32 PreFetchTd4(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
#ifndef WOLFSSL_AES_TOUCH_LINES
    word32 x = 0;
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]
    int i;

    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
 80031be:	2300      	movs	r3, #0
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	e00a      	b.n	80031da <PreFetchTd4+0x26>
        x &= (word32)Td4[i];
 80031c4:	4a0a      	ldr	r2, [pc, #40]	@ (80031f0 <PreFetchTd4+0x3c>)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	4413      	add	r3, r2
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4013      	ands	r3, r2
 80031d2:	607b      	str	r3, [r7, #4]
    for (i = 0; i < 256; i += WC_CACHE_LINE_SZ) {
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	3320      	adds	r3, #32
 80031d8:	603b      	str	r3, [r7, #0]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2bff      	cmp	r3, #255	@ 0xff
 80031de:	ddf1      	ble.n	80031c4 <PreFetchTd4+0x10>
    }
    return x;
 80031e0:	687b      	ldr	r3, [r7, #4]
#else
    return 0;
#endif
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	08006e70 	.word	0x08006e70

080031f4 <AesDecrypt_C>:
 * @param [out] outBlock  Encrypted block.
 * @param [in]  r         Rounds divided by 2.
 */
static void AesDecrypt_C(Aes* aes, const byte* inBlock, byte* outBlock,
    word32 r)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08e      	sub	sp, #56	@ 0x38
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	603b      	str	r3, [r7, #0]
    const word32* rk;

#ifdef WC_C_DYNAMIC_FALLBACK
    rk = aes->key_C_fallback;
#else
    rk = aes->key;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24

    /*
     * map byte array block to cipher state
     * and add initial round key:
     */
    XMEMCPY(&s0, inBlock,                  sizeof(s0));
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	623b      	str	r3, [r7, #32]
    XMEMCPY(&s1, inBlock + sizeof(s0),     sizeof(s1));
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	3304      	adds	r3, #4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	61fb      	str	r3, [r7, #28]
    XMEMCPY(&s2, inBlock + 2 * sizeof(s0), sizeof(s2));
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3308      	adds	r3, #8
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	61bb      	str	r3, [r7, #24]
    XMEMCPY(&s3, inBlock + 3 * sizeof(s0), sizeof(s3));
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	330c      	adds	r3, #12
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	617b      	str	r3, [r7, #20]

#ifdef LITTLE_ENDIAN_ORDER
    s0 = ByteReverseWord32(s0);
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fd73 	bl	8001d12 <ByteReverseWord32>
 800322c:	4603      	mov	r3, r0
 800322e:	623b      	str	r3, [r7, #32]
    s1 = ByteReverseWord32(s1);
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fe fd6d 	bl	8001d12 <ByteReverseWord32>
 8003238:	4603      	mov	r3, r0
 800323a:	61fb      	str	r3, [r7, #28]
    s2 = ByteReverseWord32(s2);
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	4618      	mov	r0, r3
 8003240:	f7fe fd67 	bl	8001d12 <ByteReverseWord32>
 8003244:	4603      	mov	r3, r0
 8003246:	61bb      	str	r3, [r7, #24]
    s3 = ByteReverseWord32(s3);
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fe fd61 	bl	8001d12 <ByteReverseWord32>
 8003250:	4603      	mov	r3, r0
 8003252:	617b      	str	r3, [r7, #20]
#endif

    s0 ^= rk[0];
 8003254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	4053      	eors	r3, r2
 800325c:	623b      	str	r3, [r7, #32]
    s1 ^= rk[1];
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	3304      	adds	r3, #4
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	4053      	eors	r3, r2
 8003268:	61fb      	str	r3, [r7, #28]
    s2 ^= rk[2];
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	3308      	adds	r3, #8
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	4053      	eors	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
    s3 ^= rk[3];
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	330c      	adds	r3, #12
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	4053      	eors	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

#ifndef WOLFSSL_AES_SMALL_TABLES
#ifndef WC_NO_CACHE_RESISTANT
    s0 |= PreFetchTd();
 8003282:	f7ff ff6d 	bl	8003160 <PreFetchTd>
 8003286:	4602      	mov	r2, r0
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	4313      	orrs	r3, r2
 800328c:	623b      	str	r3, [r7, #32]
                          &s2, GETBYTE(t3, 0), &s3, GETBYTE(t0, 0));           \
    s0 ^= rk[(o)+0]; s1 ^= rk[(o)+1]; s2 ^= rk[(o)+2]; s3 ^= rk[(o)+3];
#endif

#ifndef WOLFSSL_AES_NO_UNROLL
                       DEC_ROUND_T_S( 0);
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	0e1b      	lsrs	r3, r3, #24
 8003292:	b2db      	uxtb	r3, r3
 8003294:	461a      	mov	r2, r3
 8003296:	4bb6      	ldr	r3, [pc, #728]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003298:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	0c1b      	lsrs	r3, r3, #16
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	49b3      	ldr	r1, [pc, #716]	@ (8003570 <AesDecrypt_C+0x37c>)
 80032a4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80032a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032ac:	405a      	eors	r2, r3
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	49ae      	ldr	r1, [pc, #696]	@ (8003570 <AesDecrypt_C+0x37c>)
 80032b6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80032ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032be:	405a      	eors	r2, r3
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	49aa      	ldr	r1, [pc, #680]	@ (8003570 <AesDecrypt_C+0x37c>)
 80032c6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80032ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032ce:	405a      	eors	r2, r3
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	3310      	adds	r3, #16
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4053      	eors	r3, r2
 80032d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	0e1b      	lsrs	r3, r3, #24
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	4ba3      	ldr	r3, [pc, #652]	@ (8003570 <AesDecrypt_C+0x37c>)
 80032e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	0c1b      	lsrs	r3, r3, #16
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	49a0      	ldr	r1, [pc, #640]	@ (8003570 <AesDecrypt_C+0x37c>)
 80032f0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80032f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032f8:	405a      	eors	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	499b      	ldr	r1, [pc, #620]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003302:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003306:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800330a:	405a      	eors	r2, r3
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4997      	ldr	r1, [pc, #604]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003312:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003316:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800331a:	405a      	eors	r2, r3
 800331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331e:	3314      	adds	r3, #20
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4053      	eors	r3, r2
 8003324:	633b      	str	r3, [r7, #48]	@ 0x30
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	0e1b      	lsrs	r3, r3, #24
 800332a:	b2db      	uxtb	r3, r3
 800332c:	461a      	mov	r2, r3
 800332e:	4b90      	ldr	r3, [pc, #576]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003330:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	0c1b      	lsrs	r3, r3, #16
 8003338:	b2db      	uxtb	r3, r3
 800333a:	498d      	ldr	r1, [pc, #564]	@ (8003570 <AesDecrypt_C+0x37c>)
 800333c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003340:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003344:	405a      	eors	r2, r3
 8003346:	6a3b      	ldr	r3, [r7, #32]
 8003348:	0a1b      	lsrs	r3, r3, #8
 800334a:	b2db      	uxtb	r3, r3
 800334c:	4988      	ldr	r1, [pc, #544]	@ (8003570 <AesDecrypt_C+0x37c>)
 800334e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003352:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003356:	405a      	eors	r2, r3
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	b2db      	uxtb	r3, r3
 800335c:	4984      	ldr	r1, [pc, #528]	@ (8003570 <AesDecrypt_C+0x37c>)
 800335e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003362:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003366:	405a      	eors	r2, r3
 8003368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336a:	3318      	adds	r3, #24
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4053      	eors	r3, r2
 8003370:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	0e1b      	lsrs	r3, r3, #24
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	4b7d      	ldr	r3, [pc, #500]	@ (8003570 <AesDecrypt_C+0x37c>)
 800337c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	0c1b      	lsrs	r3, r3, #16
 8003384:	b2db      	uxtb	r3, r3
 8003386:	497a      	ldr	r1, [pc, #488]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003388:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800338c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003390:	405a      	eors	r2, r3
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	b2db      	uxtb	r3, r3
 8003398:	4975      	ldr	r1, [pc, #468]	@ (8003570 <AesDecrypt_C+0x37c>)
 800339a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800339e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033a2:	405a      	eors	r2, r3
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	4971      	ldr	r1, [pc, #452]	@ (8003570 <AesDecrypt_C+0x37c>)
 80033aa:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80033ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033b2:	405a      	eors	r2, r3
 80033b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b6:	331c      	adds	r3, #28
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4053      	eors	r3, r2
 80033bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    DEC_ROUND_S_T( 8); DEC_ROUND_T_S( 8);
 80033be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033c0:	0e1b      	lsrs	r3, r3, #24
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003570 <AesDecrypt_C+0x37c>)
 80033c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ce:	0c1b      	lsrs	r3, r3, #16
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	4967      	ldr	r1, [pc, #412]	@ (8003570 <AesDecrypt_C+0x37c>)
 80033d4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80033d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033dc:	405a      	eors	r2, r3
 80033de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033e0:	0a1b      	lsrs	r3, r3, #8
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	4962      	ldr	r1, [pc, #392]	@ (8003570 <AesDecrypt_C+0x37c>)
 80033e6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80033ea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033ee:	405a      	eors	r2, r3
 80033f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	495e      	ldr	r1, [pc, #376]	@ (8003570 <AesDecrypt_C+0x37c>)
 80033f6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80033fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80033fe:	405a      	eors	r2, r3
 8003400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003402:	3320      	adds	r3, #32
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4053      	eors	r3, r2
 8003408:	623b      	str	r3, [r7, #32]
 800340a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340c:	0e1b      	lsrs	r3, r3, #24
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	4b57      	ldr	r3, [pc, #348]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003414:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800341a:	0c1b      	lsrs	r3, r3, #16
 800341c:	b2db      	uxtb	r3, r3
 800341e:	4954      	ldr	r1, [pc, #336]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003420:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003424:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003428:	405a      	eors	r2, r3
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	b2db      	uxtb	r3, r3
 8003430:	494f      	ldr	r1, [pc, #316]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003432:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003436:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800343a:	405a      	eors	r2, r3
 800343c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800343e:	b2db      	uxtb	r3, r3
 8003440:	494b      	ldr	r1, [pc, #300]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003442:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003446:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800344a:	405a      	eors	r2, r3
 800344c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344e:	3324      	adds	r3, #36	@ 0x24
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4053      	eors	r3, r2
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003458:	0e1b      	lsrs	r3, r3, #24
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	4b44      	ldr	r3, [pc, #272]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003460:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003466:	0c1b      	lsrs	r3, r3, #16
 8003468:	b2db      	uxtb	r3, r3
 800346a:	4941      	ldr	r1, [pc, #260]	@ (8003570 <AesDecrypt_C+0x37c>)
 800346c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003470:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003474:	405a      	eors	r2, r3
 8003476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003478:	0a1b      	lsrs	r3, r3, #8
 800347a:	b2db      	uxtb	r3, r3
 800347c:	493c      	ldr	r1, [pc, #240]	@ (8003570 <AesDecrypt_C+0x37c>)
 800347e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003482:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003486:	405a      	eors	r2, r3
 8003488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800348a:	b2db      	uxtb	r3, r3
 800348c:	4938      	ldr	r1, [pc, #224]	@ (8003570 <AesDecrypt_C+0x37c>)
 800348e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003492:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003496:	405a      	eors	r2, r3
 8003498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349a:	3328      	adds	r3, #40	@ 0x28
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4053      	eors	r3, r2
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a4:	0e1b      	lsrs	r3, r3, #24
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b31      	ldr	r3, [pc, #196]	@ (8003570 <AesDecrypt_C+0x37c>)
 80034ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80034b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	492e      	ldr	r1, [pc, #184]	@ (8003570 <AesDecrypt_C+0x37c>)
 80034b8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034c0:	405a      	eors	r2, r3
 80034c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	4929      	ldr	r1, [pc, #164]	@ (8003570 <AesDecrypt_C+0x37c>)
 80034ca:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80034ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034d2:	405a      	eors	r2, r3
 80034d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	4925      	ldr	r1, [pc, #148]	@ (8003570 <AesDecrypt_C+0x37c>)
 80034da:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80034de:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80034e2:	405a      	eors	r2, r3
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	332c      	adds	r3, #44	@ 0x2c
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4053      	eors	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	0e1b      	lsrs	r3, r3, #24
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b1e      	ldr	r3, [pc, #120]	@ (8003570 <AesDecrypt_C+0x37c>)
 80034f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	b2db      	uxtb	r3, r3
 8003502:	491b      	ldr	r1, [pc, #108]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003504:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003508:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800350c:	405a      	eors	r2, r3
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	0a1b      	lsrs	r3, r3, #8
 8003512:	b2db      	uxtb	r3, r3
 8003514:	4916      	ldr	r1, [pc, #88]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003516:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800351a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800351e:	405a      	eors	r2, r3
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	b2db      	uxtb	r3, r3
 8003524:	4912      	ldr	r1, [pc, #72]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003526:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800352a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800352e:	405a      	eors	r2, r3
 8003530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003532:	3330      	adds	r3, #48	@ 0x30
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4053      	eors	r3, r2
 8003538:	637b      	str	r3, [r7, #52]	@ 0x34
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	0e1b      	lsrs	r3, r3, #24
 800353e:	b2db      	uxtb	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003544:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	0c1b      	lsrs	r3, r3, #16
 800354c:	b2db      	uxtb	r3, r3
 800354e:	4908      	ldr	r1, [pc, #32]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003550:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003554:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003558:	405a      	eors	r2, r3
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	0a1b      	lsrs	r3, r3, #8
 800355e:	b2db      	uxtb	r3, r3
 8003560:	4903      	ldr	r1, [pc, #12]	@ (8003570 <AesDecrypt_C+0x37c>)
 8003562:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003566:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800356a:	405a      	eors	r2, r3
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	e001      	b.n	8003574 <AesDecrypt_C+0x380>
 8003570:	08005e70 	.word	0x08005e70
 8003574:	b2db      	uxtb	r3, r3
 8003576:	49b6      	ldr	r1, [pc, #728]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003578:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800357c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003580:	405a      	eors	r2, r3
 8003582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003584:	3334      	adds	r3, #52	@ 0x34
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4053      	eors	r3, r2
 800358a:	633b      	str	r3, [r7, #48]	@ 0x30
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	0e1b      	lsrs	r3, r3, #24
 8003590:	b2db      	uxtb	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	4bae      	ldr	r3, [pc, #696]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003596:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	49ab      	ldr	r1, [pc, #684]	@ (8003850 <AesDecrypt_C+0x65c>)
 80035a2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80035a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035aa:	405a      	eors	r2, r3
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	0a1b      	lsrs	r3, r3, #8
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	49a7      	ldr	r1, [pc, #668]	@ (8003850 <AesDecrypt_C+0x65c>)
 80035b4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80035b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035bc:	405a      	eors	r2, r3
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	49a3      	ldr	r1, [pc, #652]	@ (8003850 <AesDecrypt_C+0x65c>)
 80035c4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80035c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035cc:	405a      	eors	r2, r3
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	3338      	adds	r3, #56	@ 0x38
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4053      	eors	r3, r2
 80035d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	0e1b      	lsrs	r3, r3, #24
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	461a      	mov	r2, r3
 80035e0:	4b9b      	ldr	r3, [pc, #620]	@ (8003850 <AesDecrypt_C+0x65c>)
 80035e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	4998      	ldr	r1, [pc, #608]	@ (8003850 <AesDecrypt_C+0x65c>)
 80035ee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80035f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80035f6:	405a      	eors	r2, r3
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	0a1b      	lsrs	r3, r3, #8
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	4994      	ldr	r1, [pc, #592]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003600:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003604:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003608:	405a      	eors	r2, r3
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	4990      	ldr	r1, [pc, #576]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003610:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003614:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003618:	405a      	eors	r2, r3
 800361a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361c:	333c      	adds	r3, #60	@ 0x3c
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4053      	eors	r3, r2
 8003622:	62bb      	str	r3, [r7, #40]	@ 0x28
    DEC_ROUND_S_T(16); DEC_ROUND_T_S(16);
 8003624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003626:	0e1b      	lsrs	r3, r3, #24
 8003628:	b2db      	uxtb	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	4b88      	ldr	r3, [pc, #544]	@ (8003850 <AesDecrypt_C+0x65c>)
 800362e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	b2db      	uxtb	r3, r3
 8003638:	4985      	ldr	r1, [pc, #532]	@ (8003850 <AesDecrypt_C+0x65c>)
 800363a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800363e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003642:	405a      	eors	r2, r3
 8003644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	b2db      	uxtb	r3, r3
 800364a:	4981      	ldr	r1, [pc, #516]	@ (8003850 <AesDecrypt_C+0x65c>)
 800364c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003650:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003654:	405a      	eors	r2, r3
 8003656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003658:	b2db      	uxtb	r3, r3
 800365a:	497d      	ldr	r1, [pc, #500]	@ (8003850 <AesDecrypt_C+0x65c>)
 800365c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003660:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003664:	405a      	eors	r2, r3
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	3340      	adds	r3, #64	@ 0x40
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4053      	eors	r3, r2
 800366e:	623b      	str	r3, [r7, #32]
 8003670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003672:	0e1b      	lsrs	r3, r3, #24
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	4b75      	ldr	r3, [pc, #468]	@ (8003850 <AesDecrypt_C+0x65c>)
 800367a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800367e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003680:	0c1b      	lsrs	r3, r3, #16
 8003682:	b2db      	uxtb	r3, r3
 8003684:	4972      	ldr	r1, [pc, #456]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003686:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800368a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800368e:	405a      	eors	r2, r3
 8003690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003692:	0a1b      	lsrs	r3, r3, #8
 8003694:	b2db      	uxtb	r3, r3
 8003696:	496e      	ldr	r1, [pc, #440]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003698:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800369c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036a0:	405a      	eors	r2, r3
 80036a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	496a      	ldr	r1, [pc, #424]	@ (8003850 <AesDecrypt_C+0x65c>)
 80036a8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80036ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036b0:	405a      	eors	r2, r3
 80036b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b4:	3344      	adds	r3, #68	@ 0x44
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4053      	eors	r3, r2
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036be:	0e1b      	lsrs	r3, r3, #24
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	4b62      	ldr	r3, [pc, #392]	@ (8003850 <AesDecrypt_C+0x65c>)
 80036c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80036ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	495f      	ldr	r1, [pc, #380]	@ (8003850 <AesDecrypt_C+0x65c>)
 80036d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80036d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036da:	405a      	eors	r2, r3
 80036dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	495b      	ldr	r1, [pc, #364]	@ (8003850 <AesDecrypt_C+0x65c>)
 80036e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80036e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036ec:	405a      	eors	r2, r3
 80036ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	4957      	ldr	r1, [pc, #348]	@ (8003850 <AesDecrypt_C+0x65c>)
 80036f4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80036f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036fc:	405a      	eors	r2, r3
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	3348      	adds	r3, #72	@ 0x48
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4053      	eors	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800370a:	0e1b      	lsrs	r3, r3, #24
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	4b4f      	ldr	r3, [pc, #316]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003712:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003718:	0c1b      	lsrs	r3, r3, #16
 800371a:	b2db      	uxtb	r3, r3
 800371c:	494c      	ldr	r1, [pc, #304]	@ (8003850 <AesDecrypt_C+0x65c>)
 800371e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003722:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003726:	405a      	eors	r2, r3
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	b2db      	uxtb	r3, r3
 800372e:	4948      	ldr	r1, [pc, #288]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003730:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003734:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003738:	405a      	eors	r2, r3
 800373a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4944      	ldr	r1, [pc, #272]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003740:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003744:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003748:	405a      	eors	r2, r3
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	334c      	adds	r3, #76	@ 0x4c
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4053      	eors	r3, r2
 8003752:	617b      	str	r3, [r7, #20]
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	0e1b      	lsrs	r3, r3, #24
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	4b3c      	ldr	r3, [pc, #240]	@ (8003850 <AesDecrypt_C+0x65c>)
 800375e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	0c1b      	lsrs	r3, r3, #16
 8003766:	b2db      	uxtb	r3, r3
 8003768:	4939      	ldr	r1, [pc, #228]	@ (8003850 <AesDecrypt_C+0x65c>)
 800376a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800376e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003772:	405a      	eors	r2, r3
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	b2db      	uxtb	r3, r3
 800377a:	4935      	ldr	r1, [pc, #212]	@ (8003850 <AesDecrypt_C+0x65c>)
 800377c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003780:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003784:	405a      	eors	r2, r3
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	b2db      	uxtb	r3, r3
 800378a:	4931      	ldr	r1, [pc, #196]	@ (8003850 <AesDecrypt_C+0x65c>)
 800378c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003790:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003794:	405a      	eors	r2, r3
 8003796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003798:	3350      	adds	r3, #80	@ 0x50
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4053      	eors	r3, r2
 800379e:	637b      	str	r3, [r7, #52]	@ 0x34
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	0e1b      	lsrs	r3, r3, #24
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	4b29      	ldr	r3, [pc, #164]	@ (8003850 <AesDecrypt_C+0x65c>)
 80037aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	4926      	ldr	r1, [pc, #152]	@ (8003850 <AesDecrypt_C+0x65c>)
 80037b6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80037ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037be:	405a      	eors	r2, r3
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	4922      	ldr	r1, [pc, #136]	@ (8003850 <AesDecrypt_C+0x65c>)
 80037c8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80037cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037d0:	405a      	eors	r2, r3
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	491e      	ldr	r1, [pc, #120]	@ (8003850 <AesDecrypt_C+0x65c>)
 80037d8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80037dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037e0:	405a      	eors	r2, r3
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	3354      	adds	r3, #84	@ 0x54
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4053      	eors	r3, r2
 80037ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	0e1b      	lsrs	r3, r3, #24
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	461a      	mov	r2, r3
 80037f4:	4b16      	ldr	r3, [pc, #88]	@ (8003850 <AesDecrypt_C+0x65c>)
 80037f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	0c1b      	lsrs	r3, r3, #16
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	4913      	ldr	r1, [pc, #76]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003802:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003806:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800380a:	405a      	eors	r2, r3
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	0a1b      	lsrs	r3, r3, #8
 8003810:	b2db      	uxtb	r3, r3
 8003812:	490f      	ldr	r1, [pc, #60]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003814:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003818:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800381c:	405a      	eors	r2, r3
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	490b      	ldr	r1, [pc, #44]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003824:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003828:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800382c:	405a      	eors	r2, r3
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	3358      	adds	r3, #88	@ 0x58
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4053      	eors	r3, r2
 8003836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	0e1b      	lsrs	r3, r3, #24
 800383c:	b2db      	uxtb	r3, r3
 800383e:	461a      	mov	r2, r3
 8003840:	4b03      	ldr	r3, [pc, #12]	@ (8003850 <AesDecrypt_C+0x65c>)
 8003842:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	0c1b      	lsrs	r3, r3, #16
 800384a:	b2db      	uxtb	r3, r3
 800384c:	e002      	b.n	8003854 <AesDecrypt_C+0x660>
 800384e:	bf00      	nop
 8003850:	08005e70 	.word	0x08005e70
 8003854:	49b6      	ldr	r1, [pc, #728]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003856:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800385a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800385e:	405a      	eors	r2, r3
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	0a1b      	lsrs	r3, r3, #8
 8003864:	b2db      	uxtb	r3, r3
 8003866:	49b2      	ldr	r1, [pc, #712]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003868:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800386c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003870:	405a      	eors	r2, r3
 8003872:	6a3b      	ldr	r3, [r7, #32]
 8003874:	b2db      	uxtb	r3, r3
 8003876:	49ae      	ldr	r1, [pc, #696]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003878:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800387c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003880:	405a      	eors	r2, r3
 8003882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003884:	335c      	adds	r3, #92	@ 0x5c
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4053      	eors	r3, r2
 800388a:	62bb      	str	r3, [r7, #40]	@ 0x28
    DEC_ROUND_S_T(24); DEC_ROUND_T_S(24);
 800388c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800388e:	0e1b      	lsrs	r3, r3, #24
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	4ba6      	ldr	r3, [pc, #664]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003896:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800389a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800389c:	0c1b      	lsrs	r3, r3, #16
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	49a3      	ldr	r1, [pc, #652]	@ (8003b30 <AesDecrypt_C+0x93c>)
 80038a2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80038a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038aa:	405a      	eors	r2, r3
 80038ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	499f      	ldr	r1, [pc, #636]	@ (8003b30 <AesDecrypt_C+0x93c>)
 80038b4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80038b8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038bc:	405a      	eors	r2, r3
 80038be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	499b      	ldr	r1, [pc, #620]	@ (8003b30 <AesDecrypt_C+0x93c>)
 80038c4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80038c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038cc:	405a      	eors	r2, r3
 80038ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d0:	3360      	adds	r3, #96	@ 0x60
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4053      	eors	r3, r2
 80038d6:	623b      	str	r3, [r7, #32]
 80038d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038da:	0e1b      	lsrs	r3, r3, #24
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	461a      	mov	r2, r3
 80038e0:	4b93      	ldr	r3, [pc, #588]	@ (8003b30 <AesDecrypt_C+0x93c>)
 80038e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80038e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038e8:	0c1b      	lsrs	r3, r3, #16
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	4990      	ldr	r1, [pc, #576]	@ (8003b30 <AesDecrypt_C+0x93c>)
 80038ee:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80038f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80038f6:	405a      	eors	r2, r3
 80038f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fa:	0a1b      	lsrs	r3, r3, #8
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	498c      	ldr	r1, [pc, #560]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003900:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003904:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003908:	405a      	eors	r2, r3
 800390a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800390c:	b2db      	uxtb	r3, r3
 800390e:	4988      	ldr	r1, [pc, #544]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003910:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003914:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003918:	405a      	eors	r2, r3
 800391a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800391c:	3364      	adds	r3, #100	@ 0x64
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4053      	eors	r3, r2
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003926:	0e1b      	lsrs	r3, r3, #24
 8003928:	b2db      	uxtb	r3, r3
 800392a:	461a      	mov	r2, r3
 800392c:	4b80      	ldr	r3, [pc, #512]	@ (8003b30 <AesDecrypt_C+0x93c>)
 800392e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	b2db      	uxtb	r3, r3
 8003938:	497d      	ldr	r1, [pc, #500]	@ (8003b30 <AesDecrypt_C+0x93c>)
 800393a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800393e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003942:	405a      	eors	r2, r3
 8003944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003946:	0a1b      	lsrs	r3, r3, #8
 8003948:	b2db      	uxtb	r3, r3
 800394a:	4979      	ldr	r1, [pc, #484]	@ (8003b30 <AesDecrypt_C+0x93c>)
 800394c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003950:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003954:	405a      	eors	r2, r3
 8003956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003958:	b2db      	uxtb	r3, r3
 800395a:	4975      	ldr	r1, [pc, #468]	@ (8003b30 <AesDecrypt_C+0x93c>)
 800395c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003960:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003964:	405a      	eors	r2, r3
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	3368      	adds	r3, #104	@ 0x68
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4053      	eors	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003972:	0e1b      	lsrs	r3, r3, #24
 8003974:	b2db      	uxtb	r3, r3
 8003976:	461a      	mov	r2, r3
 8003978:	4b6d      	ldr	r3, [pc, #436]	@ (8003b30 <AesDecrypt_C+0x93c>)
 800397a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800397e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	b2db      	uxtb	r3, r3
 8003984:	496a      	ldr	r1, [pc, #424]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003986:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800398a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800398e:	405a      	eors	r2, r3
 8003990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	b2db      	uxtb	r3, r3
 8003996:	4966      	ldr	r1, [pc, #408]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003998:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800399c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039a0:	405a      	eors	r2, r3
 80039a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	4962      	ldr	r1, [pc, #392]	@ (8003b30 <AesDecrypt_C+0x93c>)
 80039a8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80039ac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039b0:	405a      	eors	r2, r3
 80039b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b4:	336c      	adds	r3, #108	@ 0x6c
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4053      	eors	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	0e1b      	lsrs	r3, r3, #24
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	461a      	mov	r2, r3
 80039c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003b30 <AesDecrypt_C+0x93c>)
 80039c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	4957      	ldr	r1, [pc, #348]	@ (8003b30 <AesDecrypt_C+0x93c>)
 80039d2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80039d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039da:	405a      	eors	r2, r3
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	4953      	ldr	r1, [pc, #332]	@ (8003b30 <AesDecrypt_C+0x93c>)
 80039e4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80039e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039ec:	405a      	eors	r2, r3
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	494f      	ldr	r1, [pc, #316]	@ (8003b30 <AesDecrypt_C+0x93c>)
 80039f4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80039f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80039fc:	405a      	eors	r2, r3
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	3370      	adds	r3, #112	@ 0x70
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4053      	eors	r3, r2
 8003a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	0e1b      	lsrs	r3, r3, #24
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4b47      	ldr	r3, [pc, #284]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003a12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	0c1b      	lsrs	r3, r3, #16
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	4944      	ldr	r1, [pc, #272]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003a1e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003a22:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a26:	405a      	eors	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	4940      	ldr	r1, [pc, #256]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003a30:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003a34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a38:	405a      	eors	r2, r3
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	493c      	ldr	r1, [pc, #240]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003a40:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003a44:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a48:	405a      	eors	r2, r3
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	3374      	adds	r3, #116	@ 0x74
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4053      	eors	r3, r2
 8003a52:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	0e1b      	lsrs	r3, r3, #24
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	4b34      	ldr	r3, [pc, #208]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003a5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	4931      	ldr	r1, [pc, #196]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003a6a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003a6e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a72:	405a      	eors	r2, r3
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	492d      	ldr	r1, [pc, #180]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003a7c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003a80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a84:	405a      	eors	r2, r3
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	4929      	ldr	r1, [pc, #164]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003a8c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003a90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003a94:	405a      	eors	r2, r3
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	3378      	adds	r3, #120	@ 0x78
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4053      	eors	r3, r2
 8003a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	0e1b      	lsrs	r3, r3, #24
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	4b21      	ldr	r3, [pc, #132]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003aaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	0c1b      	lsrs	r3, r3, #16
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	491e      	ldr	r1, [pc, #120]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003ab6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003aba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003abe:	405a      	eors	r2, r3
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	491a      	ldr	r1, [pc, #104]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003ac8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003acc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ad0:	405a      	eors	r2, r3
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	4916      	ldr	r1, [pc, #88]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003ad8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003adc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ae0:	405a      	eors	r2, r3
 8003ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae4:	337c      	adds	r3, #124	@ 0x7c
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4053      	eors	r3, r2
 8003aea:	62bb      	str	r3, [r7, #40]	@ 0x28
    DEC_ROUND_S_T(32); DEC_ROUND_T_S(32);
 8003aec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aee:	0e1b      	lsrs	r3, r3, #24
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	461a      	mov	r2, r3
 8003af4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003af6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afc:	0c1b      	lsrs	r3, r3, #16
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	490b      	ldr	r1, [pc, #44]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003b02:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003b06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b0a:	405a      	eors	r2, r3
 8003b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	4907      	ldr	r1, [pc, #28]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003b14:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003b18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b1c:	405a      	eors	r2, r3
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	4903      	ldr	r1, [pc, #12]	@ (8003b30 <AesDecrypt_C+0x93c>)
 8003b24:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003b28:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b2c:	405a      	eors	r2, r3
 8003b2e:	e001      	b.n	8003b34 <AesDecrypt_C+0x940>
 8003b30:	08005e70 	.word	0x08005e70
 8003b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b36:	3380      	adds	r3, #128	@ 0x80
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4053      	eors	r3, r2
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	0e1b      	lsrs	r3, r3, #24
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	4bb6      	ldr	r3, [pc, #728]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003b48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4e:	0c1b      	lsrs	r3, r3, #16
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	49b3      	ldr	r1, [pc, #716]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003b54:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003b58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b5c:	405a      	eors	r2, r3
 8003b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b60:	0a1b      	lsrs	r3, r3, #8
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	49ae      	ldr	r1, [pc, #696]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003b66:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003b6a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b6e:	405a      	eors	r2, r3
 8003b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	49aa      	ldr	r1, [pc, #680]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003b76:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003b7a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003b7e:	405a      	eors	r2, r3
 8003b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b82:	3384      	adds	r3, #132	@ 0x84
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4053      	eors	r3, r2
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8c:	0e1b      	lsrs	r3, r3, #24
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	4ba3      	ldr	r3, [pc, #652]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003b94:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9a:	0c1b      	lsrs	r3, r3, #16
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	49a0      	ldr	r1, [pc, #640]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003ba0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003ba4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ba8:	405a      	eors	r2, r3
 8003baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	499b      	ldr	r1, [pc, #620]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003bb2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003bb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bba:	405a      	eors	r2, r3
 8003bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	4997      	ldr	r1, [pc, #604]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003bc2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003bc6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bca:	405a      	eors	r2, r3
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	3388      	adds	r3, #136	@ 0x88
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4053      	eors	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd8:	0e1b      	lsrs	r3, r3, #24
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b90      	ldr	r3, [pc, #576]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003be0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	498d      	ldr	r1, [pc, #564]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003bec:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003bf0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003bf4:	405a      	eors	r2, r3
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	0a1b      	lsrs	r3, r3, #8
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	4988      	ldr	r1, [pc, #544]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003bfe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003c02:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c06:	405a      	eors	r2, r3
 8003c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	4984      	ldr	r1, [pc, #528]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003c0e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003c12:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c16:	405a      	eors	r2, r3
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	338c      	adds	r3, #140	@ 0x8c
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4053      	eors	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	0e1b      	lsrs	r3, r3, #24
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	4b7d      	ldr	r3, [pc, #500]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003c2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	0c1b      	lsrs	r3, r3, #16
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	497a      	ldr	r1, [pc, #488]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003c38:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003c3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c40:	405a      	eors	r2, r3
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	0a1b      	lsrs	r3, r3, #8
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	4975      	ldr	r1, [pc, #468]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003c4a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003c4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c52:	405a      	eors	r2, r3
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	4971      	ldr	r1, [pc, #452]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003c5a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003c5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c62:	405a      	eors	r2, r3
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	3390      	adds	r3, #144	@ 0x90
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4053      	eors	r3, r2
 8003c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	0e1b      	lsrs	r3, r3, #24
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b6a      	ldr	r3, [pc, #424]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003c78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4967      	ldr	r1, [pc, #412]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003c84:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003c88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c8c:	405a      	eors	r2, r3
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	4962      	ldr	r1, [pc, #392]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003c96:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003c9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c9e:	405a      	eors	r2, r3
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	495e      	ldr	r1, [pc, #376]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003ca6:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003caa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cae:	405a      	eors	r2, r3
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	3394      	adds	r3, #148	@ 0x94
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4053      	eors	r3, r2
 8003cb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	0e1b      	lsrs	r3, r3, #24
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	4b57      	ldr	r3, [pc, #348]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003cc4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	4954      	ldr	r1, [pc, #336]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003cd0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003cd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cd8:	405a      	eors	r2, r3
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	0a1b      	lsrs	r3, r3, #8
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	494f      	ldr	r1, [pc, #316]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003ce2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003ce6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cea:	405a      	eors	r2, r3
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	494b      	ldr	r1, [pc, #300]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003cf2:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003cf6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cfa:	405a      	eors	r2, r3
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfe:	3398      	adds	r3, #152	@ 0x98
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4053      	eors	r3, r2
 8003d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	0e1b      	lsrs	r3, r3, #24
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b44      	ldr	r3, [pc, #272]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003d10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	0c1b      	lsrs	r3, r3, #16
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	4941      	ldr	r1, [pc, #260]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003d1c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003d20:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d24:	405a      	eors	r2, r3
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	493c      	ldr	r1, [pc, #240]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003d2e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003d32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d36:	405a      	eors	r2, r3
 8003d38:	6a3b      	ldr	r3, [r7, #32]
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	4938      	ldr	r1, [pc, #224]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003d3e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003d42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d46:	405a      	eors	r2, r3
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	339c      	adds	r3, #156	@ 0x9c
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4053      	eors	r3, r2
 8003d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (r > 5) {
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	2b05      	cmp	r3, #5
 8003d56:	f240 826a 	bls.w	800422e <AesDecrypt_C+0x103a>
        DEC_ROUND_S_T(40); DEC_ROUND_T_S(40);
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5c:	0e1b      	lsrs	r3, r3, #24
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	461a      	mov	r2, r3
 8003d62:	4b2f      	ldr	r3, [pc, #188]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003d64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6a:	0c1b      	lsrs	r3, r3, #16
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	492c      	ldr	r1, [pc, #176]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003d70:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003d74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d78:	405a      	eors	r2, r3
 8003d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7c:	0a1b      	lsrs	r3, r3, #8
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	4927      	ldr	r1, [pc, #156]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003d82:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003d86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d8a:	405a      	eors	r2, r3
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	4923      	ldr	r1, [pc, #140]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003d92:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003d96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003d9a:	405a      	eors	r2, r3
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	33a0      	adds	r3, #160	@ 0xa0
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4053      	eors	r3, r2
 8003da4:	623b      	str	r3, [r7, #32]
 8003da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da8:	0e1b      	lsrs	r3, r3, #24
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	4b1c      	ldr	r3, [pc, #112]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003db0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db6:	0c1b      	lsrs	r3, r3, #16
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	4919      	ldr	r1, [pc, #100]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003dbc:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003dc0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dc4:	405a      	eors	r2, r3
 8003dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc8:	0a1b      	lsrs	r3, r3, #8
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	4914      	ldr	r1, [pc, #80]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003dce:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003dd2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003dd6:	405a      	eors	r2, r3
 8003dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	4910      	ldr	r1, [pc, #64]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003dde:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003de2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003de6:	405a      	eors	r2, r3
 8003de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dea:	33a4      	adds	r3, #164	@ 0xa4
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4053      	eors	r3, r2
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003df4:	0e1b      	lsrs	r3, r3, #24
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	461a      	mov	r2, r3
 8003dfa:	4b09      	ldr	r3, [pc, #36]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003dfc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	4906      	ldr	r1, [pc, #24]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003e08:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003e0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e10:	405a      	eors	r2, r3
 8003e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	4901      	ldr	r1, [pc, #4]	@ (8003e20 <AesDecrypt_C+0xc2c>)
 8003e1a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003e1e:	e001      	b.n	8003e24 <AesDecrypt_C+0xc30>
 8003e20:	08005e70 	.word	0x08005e70
 8003e24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e28:	405a      	eors	r2, r3
 8003e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	49b6      	ldr	r1, [pc, #728]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003e30:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003e34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e38:	405a      	eors	r2, r3
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	33a8      	adds	r3, #168	@ 0xa8
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4053      	eors	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e46:	0e1b      	lsrs	r3, r3, #24
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4bae      	ldr	r3, [pc, #696]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003e4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e54:	0c1b      	lsrs	r3, r3, #16
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	49ab      	ldr	r1, [pc, #684]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003e5a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003e5e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e62:	405a      	eors	r2, r3
 8003e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e66:	0a1b      	lsrs	r3, r3, #8
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	49a7      	ldr	r1, [pc, #668]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003e6c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003e70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e74:	405a      	eors	r2, r3
 8003e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	49a3      	ldr	r1, [pc, #652]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003e7c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003e80:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003e84:	405a      	eors	r2, r3
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	33ac      	adds	r3, #172	@ 0xac
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4053      	eors	r3, r2
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	0e1b      	lsrs	r3, r3, #24
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	4b9b      	ldr	r3, [pc, #620]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003e9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	0c1b      	lsrs	r3, r3, #16
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	4998      	ldr	r1, [pc, #608]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003ea6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003eaa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003eae:	405a      	eors	r2, r3
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	0a1b      	lsrs	r3, r3, #8
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	4994      	ldr	r1, [pc, #592]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003eb8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003ebc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ec0:	405a      	eors	r2, r3
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	4990      	ldr	r1, [pc, #576]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003ec8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003ecc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ed0:	405a      	eors	r2, r3
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	33b0      	adds	r3, #176	@ 0xb0
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4053      	eors	r3, r2
 8003eda:	637b      	str	r3, [r7, #52]	@ 0x34
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	0e1b      	lsrs	r3, r3, #24
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4b88      	ldr	r3, [pc, #544]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003ee6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	0c1b      	lsrs	r3, r3, #16
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	4985      	ldr	r1, [pc, #532]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003ef2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003ef6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003efa:	405a      	eors	r2, r3
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	4981      	ldr	r1, [pc, #516]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003f04:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003f08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f0c:	405a      	eors	r2, r3
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	497d      	ldr	r1, [pc, #500]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003f14:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003f18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f1c:	405a      	eors	r2, r3
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f20:	33b4      	adds	r3, #180	@ 0xb4
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4053      	eors	r3, r2
 8003f26:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	0e1b      	lsrs	r3, r3, #24
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4b75      	ldr	r3, [pc, #468]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003f32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	0c1b      	lsrs	r3, r3, #16
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	4972      	ldr	r1, [pc, #456]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003f3e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003f42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f46:	405a      	eors	r2, r3
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	0a1b      	lsrs	r3, r3, #8
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	496e      	ldr	r1, [pc, #440]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003f50:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003f54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f58:	405a      	eors	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	496a      	ldr	r1, [pc, #424]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003f60:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003f64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f68:	405a      	eors	r2, r3
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6c:	33b8      	adds	r3, #184	@ 0xb8
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4053      	eors	r3, r2
 8003f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	0e1b      	lsrs	r3, r3, #24
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4b62      	ldr	r3, [pc, #392]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003f7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	495f      	ldr	r1, [pc, #380]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003f8a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003f8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003f92:	405a      	eors	r2, r3
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	0a1b      	lsrs	r3, r3, #8
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	495b      	ldr	r1, [pc, #364]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003f9c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003fa0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fa4:	405a      	eors	r2, r3
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	4957      	ldr	r1, [pc, #348]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003fac:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003fb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fb4:	405a      	eors	r2, r3
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	33bc      	adds	r3, #188	@ 0xbc
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4053      	eors	r3, r2
 8003fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (r > 6) {
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b06      	cmp	r3, #6
 8003fc4:	f240 8133 	bls.w	800422e <AesDecrypt_C+0x103a>
            DEC_ROUND_S_T(48); DEC_ROUND_T_S(48);
 8003fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fca:	0e1b      	lsrs	r3, r3, #24
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	4b4d      	ldr	r3, [pc, #308]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003fd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	494a      	ldr	r1, [pc, #296]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003fde:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003fe2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003fe6:	405a      	eors	r2, r3
 8003fe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fea:	0a1b      	lsrs	r3, r3, #8
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	4946      	ldr	r1, [pc, #280]	@ (8004108 <AesDecrypt_C+0xf14>)
 8003ff0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003ff4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003ff8:	405a      	eors	r2, r3
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	4942      	ldr	r1, [pc, #264]	@ (8004108 <AesDecrypt_C+0xf14>)
 8004000:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004004:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004008:	405a      	eors	r2, r3
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	33c0      	adds	r3, #192	@ 0xc0
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4053      	eors	r3, r2
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	0e1b      	lsrs	r3, r3, #24
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	4b3a      	ldr	r3, [pc, #232]	@ (8004108 <AesDecrypt_C+0xf14>)
 800401e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004024:	0c1b      	lsrs	r3, r3, #16
 8004026:	b2db      	uxtb	r3, r3
 8004028:	4937      	ldr	r1, [pc, #220]	@ (8004108 <AesDecrypt_C+0xf14>)
 800402a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800402e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004032:	405a      	eors	r2, r3
 8004034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	b2db      	uxtb	r3, r3
 800403a:	4933      	ldr	r1, [pc, #204]	@ (8004108 <AesDecrypt_C+0xf14>)
 800403c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004040:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004044:	405a      	eors	r2, r3
 8004046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004048:	b2db      	uxtb	r3, r3
 800404a:	492f      	ldr	r1, [pc, #188]	@ (8004108 <AesDecrypt_C+0xf14>)
 800404c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004050:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004054:	405a      	eors	r2, r3
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	33c4      	adds	r3, #196	@ 0xc4
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4053      	eors	r3, r2
 800405e:	61fb      	str	r3, [r7, #28]
 8004060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004062:	0e1b      	lsrs	r3, r3, #24
 8004064:	b2db      	uxtb	r3, r3
 8004066:	461a      	mov	r2, r3
 8004068:	4b27      	ldr	r3, [pc, #156]	@ (8004108 <AesDecrypt_C+0xf14>)
 800406a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004070:	0c1b      	lsrs	r3, r3, #16
 8004072:	b2db      	uxtb	r3, r3
 8004074:	4924      	ldr	r1, [pc, #144]	@ (8004108 <AesDecrypt_C+0xf14>)
 8004076:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800407a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800407e:	405a      	eors	r2, r3
 8004080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	b2db      	uxtb	r3, r3
 8004086:	4920      	ldr	r1, [pc, #128]	@ (8004108 <AesDecrypt_C+0xf14>)
 8004088:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800408c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004090:	405a      	eors	r2, r3
 8004092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004094:	b2db      	uxtb	r3, r3
 8004096:	491c      	ldr	r1, [pc, #112]	@ (8004108 <AesDecrypt_C+0xf14>)
 8004098:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800409c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040a0:	405a      	eors	r2, r3
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	33c8      	adds	r3, #200	@ 0xc8
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4053      	eors	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ae:	0e1b      	lsrs	r3, r3, #24
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	461a      	mov	r2, r3
 80040b4:	4b14      	ldr	r3, [pc, #80]	@ (8004108 <AesDecrypt_C+0xf14>)
 80040b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80040ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	4911      	ldr	r1, [pc, #68]	@ (8004108 <AesDecrypt_C+0xf14>)
 80040c2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80040c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040ca:	405a      	eors	r2, r3
 80040cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	490d      	ldr	r1, [pc, #52]	@ (8004108 <AesDecrypt_C+0xf14>)
 80040d4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80040d8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040dc:	405a      	eors	r2, r3
 80040de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	4909      	ldr	r1, [pc, #36]	@ (8004108 <AesDecrypt_C+0xf14>)
 80040e4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80040e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80040ec:	405a      	eors	r2, r3
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	33cc      	adds	r3, #204	@ 0xcc
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4053      	eors	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	0e1b      	lsrs	r3, r3, #24
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	461a      	mov	r2, r3
 8004100:	4b01      	ldr	r3, [pc, #4]	@ (8004108 <AesDecrypt_C+0xf14>)
 8004102:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004106:	e001      	b.n	800410c <AesDecrypt_C+0xf18>
 8004108:	08005e70 	.word	0x08005e70
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	b2db      	uxtb	r3, r3
 8004112:	49a5      	ldr	r1, [pc, #660]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 8004114:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004118:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800411c:	405a      	eors	r2, r3
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	0a1b      	lsrs	r3, r3, #8
 8004122:	b2db      	uxtb	r3, r3
 8004124:	49a0      	ldr	r1, [pc, #640]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 8004126:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800412a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800412e:	405a      	eors	r2, r3
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	499c      	ldr	r1, [pc, #624]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 8004136:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800413a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800413e:	405a      	eors	r2, r3
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	33d0      	adds	r3, #208	@ 0xd0
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4053      	eors	r3, r2
 8004148:	637b      	str	r3, [r7, #52]	@ 0x34
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	0e1b      	lsrs	r3, r3, #24
 800414e:	b2db      	uxtb	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	4b95      	ldr	r3, [pc, #596]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 8004154:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004158:	6a3b      	ldr	r3, [r7, #32]
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	b2db      	uxtb	r3, r3
 800415e:	4992      	ldr	r1, [pc, #584]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 8004160:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004164:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004168:	405a      	eors	r2, r3
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	b2db      	uxtb	r3, r3
 8004170:	498d      	ldr	r1, [pc, #564]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 8004172:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004176:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800417a:	405a      	eors	r2, r3
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	b2db      	uxtb	r3, r3
 8004180:	4989      	ldr	r1, [pc, #548]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 8004182:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004186:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800418a:	405a      	eors	r2, r3
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	33d4      	adds	r3, #212	@ 0xd4
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4053      	eors	r3, r2
 8004194:	633b      	str	r3, [r7, #48]	@ 0x30
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	0e1b      	lsrs	r3, r3, #24
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	4b82      	ldr	r3, [pc, #520]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 80041a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	0c1b      	lsrs	r3, r3, #16
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	497f      	ldr	r1, [pc, #508]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 80041ac:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80041b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041b4:	405a      	eors	r2, r3
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	0a1b      	lsrs	r3, r3, #8
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	497a      	ldr	r1, [pc, #488]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 80041be:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80041c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041c6:	405a      	eors	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	4976      	ldr	r1, [pc, #472]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 80041ce:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80041d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80041d6:	405a      	eors	r2, r3
 80041d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041da:	33d8      	adds	r3, #216	@ 0xd8
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4053      	eors	r3, r2
 80041e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	0e1b      	lsrs	r3, r3, #24
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	4b6f      	ldr	r3, [pc, #444]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 80041ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	0c1b      	lsrs	r3, r3, #16
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	496c      	ldr	r1, [pc, #432]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 80041f8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80041fc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004200:	405a      	eors	r2, r3
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	0a1b      	lsrs	r3, r3, #8
 8004206:	b2db      	uxtb	r3, r3
 8004208:	4967      	ldr	r1, [pc, #412]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 800420a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800420e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004212:	405a      	eors	r2, r3
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	4963      	ldr	r1, [pc, #396]	@ (80043a8 <AesDecrypt_C+0x11b4>)
 800421a:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800421e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004222:	405a      	eors	r2, r3
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	33dc      	adds	r3, #220	@ 0xdc
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4053      	eors	r3, r2
 800422c:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    }
    rk += r * 8;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	015b      	lsls	r3, r3, #5
 8004232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004234:	4413      	add	r3, r2
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
     * apply last round and
     * map cipher state to byte array block:
     */

#ifndef WC_NO_CACHE_RESISTANT
    t0 |= PreFetchTd4();
 8004238:	f7fe ffbc 	bl	80031b4 <PreFetchTd4>
 800423c:	4602      	mov	r2, r0
 800423e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004240:	4313      	orrs	r3, r2
 8004242:	637b      	str	r3, [r7, #52]	@ 0x34
#endif

    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 8004244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004246:	0e1b      	lsrs	r3, r3, #24
 8004248:	b2db      	uxtb	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	4b57      	ldr	r3, [pc, #348]	@ (80043ac <AesDecrypt_C+0x11b8>)
 800424e:	5c9b      	ldrb	r3, [r3, r2]
 8004250:	061a      	lsls	r2, r3, #24
 8004252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004254:	0c1b      	lsrs	r3, r3, #16
 8004256:	b2db      	uxtb	r3, r3
 8004258:	4619      	mov	r1, r3
 800425a:	4b54      	ldr	r3, [pc, #336]	@ (80043ac <AesDecrypt_C+0x11b8>)
 800425c:	5c5b      	ldrb	r3, [r3, r1]
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	431a      	orrs	r2, r3
 8004262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004264:	0a1b      	lsrs	r3, r3, #8
 8004266:	b2db      	uxtb	r3, r3
 8004268:	4619      	mov	r1, r3
 800426a:	4b50      	ldr	r3, [pc, #320]	@ (80043ac <AesDecrypt_C+0x11b8>)
 800426c:	5c5b      	ldrb	r3, [r3, r1]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	4313      	orrs	r3, r2
 8004272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	4611      	mov	r1, r2
 8004278:	4a4c      	ldr	r2, [pc, #304]	@ (80043ac <AesDecrypt_C+0x11b8>)
 800427a:	5c52      	ldrb	r2, [r2, r1]
 800427c:	431a      	orrs	r2, r3
                          GETBYTE(t2, 1), GETBYTE(t1, 0)) ^ rk[0];
 800427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4053      	eors	r3, r2
    s0 = GetTable8_4(Td4, GETBYTE(t0, 3), GETBYTE(t3, 2),
 8004284:	623b      	str	r3, [r7, #32]
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
 8004286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004288:	0e1b      	lsrs	r3, r3, #24
 800428a:	b2db      	uxtb	r3, r3
 800428c:	461a      	mov	r2, r3
 800428e:	4b47      	ldr	r3, [pc, #284]	@ (80043ac <AesDecrypt_C+0x11b8>)
 8004290:	5c9b      	ldrb	r3, [r3, r2]
 8004292:	061a      	lsls	r2, r3, #24
 8004294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	b2db      	uxtb	r3, r3
 800429a:	4619      	mov	r1, r3
 800429c:	4b43      	ldr	r3, [pc, #268]	@ (80043ac <AesDecrypt_C+0x11b8>)
 800429e:	5c5b      	ldrb	r3, [r3, r1]
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	431a      	orrs	r2, r3
 80042a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a6:	0a1b      	lsrs	r3, r3, #8
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	4619      	mov	r1, r3
 80042ac:	4b3f      	ldr	r3, [pc, #252]	@ (80043ac <AesDecrypt_C+0x11b8>)
 80042ae:	5c5b      	ldrb	r3, [r3, r1]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	4313      	orrs	r3, r2
 80042b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	4611      	mov	r1, r2
 80042ba:	4a3c      	ldr	r2, [pc, #240]	@ (80043ac <AesDecrypt_C+0x11b8>)
 80042bc:	5c52      	ldrb	r2, [r2, r1]
 80042be:	431a      	orrs	r2, r3
                          GETBYTE(t3, 1), GETBYTE(t2, 0)) ^ rk[1];
 80042c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c2:	3304      	adds	r3, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4053      	eors	r3, r2
    s1 = GetTable8_4(Td4, GETBYTE(t1, 3), GETBYTE(t0, 2),
 80042c8:	61fb      	str	r3, [r7, #28]
    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
 80042ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042cc:	0e1b      	lsrs	r3, r3, #24
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	461a      	mov	r2, r3
 80042d2:	4b36      	ldr	r3, [pc, #216]	@ (80043ac <AesDecrypt_C+0x11b8>)
 80042d4:	5c9b      	ldrb	r3, [r3, r2]
 80042d6:	061a      	lsls	r2, r3, #24
 80042d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042da:	0c1b      	lsrs	r3, r3, #16
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4619      	mov	r1, r3
 80042e0:	4b32      	ldr	r3, [pc, #200]	@ (80043ac <AesDecrypt_C+0x11b8>)
 80042e2:	5c5b      	ldrb	r3, [r3, r1]
 80042e4:	041b      	lsls	r3, r3, #16
 80042e6:	431a      	orrs	r2, r3
 80042e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ea:	0a1b      	lsrs	r3, r3, #8
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	4619      	mov	r1, r3
 80042f0:	4b2e      	ldr	r3, [pc, #184]	@ (80043ac <AesDecrypt_C+0x11b8>)
 80042f2:	5c5b      	ldrb	r3, [r3, r1]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	4313      	orrs	r3, r2
 80042f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042fa:	b2d2      	uxtb	r2, r2
 80042fc:	4611      	mov	r1, r2
 80042fe:	4a2b      	ldr	r2, [pc, #172]	@ (80043ac <AesDecrypt_C+0x11b8>)
 8004300:	5c52      	ldrb	r2, [r2, r1]
 8004302:	431a      	orrs	r2, r3
                          GETBYTE(t0, 1), GETBYTE(t3, 0)) ^ rk[2];
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	3308      	adds	r3, #8
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4053      	eors	r3, r2
    s2 = GetTable8_4(Td4, GETBYTE(t2, 3), GETBYTE(t1, 2),
 800430c:	61bb      	str	r3, [r7, #24]
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 800430e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004310:	0e1b      	lsrs	r3, r3, #24
 8004312:	b2db      	uxtb	r3, r3
 8004314:	461a      	mov	r2, r3
 8004316:	4b25      	ldr	r3, [pc, #148]	@ (80043ac <AesDecrypt_C+0x11b8>)
 8004318:	5c9b      	ldrb	r3, [r3, r2]
 800431a:	061a      	lsls	r2, r3, #24
 800431c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431e:	0c1b      	lsrs	r3, r3, #16
 8004320:	b2db      	uxtb	r3, r3
 8004322:	4619      	mov	r1, r3
 8004324:	4b21      	ldr	r3, [pc, #132]	@ (80043ac <AesDecrypt_C+0x11b8>)
 8004326:	5c5b      	ldrb	r3, [r3, r1]
 8004328:	041b      	lsls	r3, r3, #16
 800432a:	431a      	orrs	r2, r3
 800432c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800432e:	0a1b      	lsrs	r3, r3, #8
 8004330:	b2db      	uxtb	r3, r3
 8004332:	4619      	mov	r1, r3
 8004334:	4b1d      	ldr	r3, [pc, #116]	@ (80043ac <AesDecrypt_C+0x11b8>)
 8004336:	5c5b      	ldrb	r3, [r3, r1]
 8004338:	021b      	lsls	r3, r3, #8
 800433a:	4313      	orrs	r3, r2
 800433c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	4611      	mov	r1, r2
 8004342:	4a1a      	ldr	r2, [pc, #104]	@ (80043ac <AesDecrypt_C+0x11b8>)
 8004344:	5c52      	ldrb	r2, [r2, r1]
 8004346:	431a      	orrs	r2, r3
                          GETBYTE(t1, 1), GETBYTE(t0, 0)) ^ rk[3];
 8004348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434a:	330c      	adds	r3, #12
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4053      	eors	r3, r2
    s3 = GetTable8_4(Td4, GETBYTE(t3, 3), GETBYTE(t2, 2),
 8004350:	617b      	str	r3, [r7, #20]
    s3 = t3 ^ rk[3];
#endif

    /* write out */
#ifdef LITTLE_ENDIAN_ORDER
    s0 = ByteReverseWord32(s0);
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	4618      	mov	r0, r3
 8004356:	f7fd fcdc 	bl	8001d12 <ByteReverseWord32>
 800435a:	4603      	mov	r3, r0
 800435c:	623b      	str	r3, [r7, #32]
    s1 = ByteReverseWord32(s1);
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4618      	mov	r0, r3
 8004362:	f7fd fcd6 	bl	8001d12 <ByteReverseWord32>
 8004366:	4603      	mov	r3, r0
 8004368:	61fb      	str	r3, [r7, #28]
    s2 = ByteReverseWord32(s2);
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	4618      	mov	r0, r3
 800436e:	f7fd fcd0 	bl	8001d12 <ByteReverseWord32>
 8004372:	4603      	mov	r3, r0
 8004374:	61bb      	str	r3, [r7, #24]
    s3 = ByteReverseWord32(s3);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	4618      	mov	r0, r3
 800437a:	f7fd fcca 	bl	8001d12 <ByteReverseWord32>
 800437e:	4603      	mov	r3, r0
 8004380:	617b      	str	r3, [r7, #20]
#endif

    XMEMCPY(outBlock,                  &s0, sizeof(s0));
 8004382:	6a3a      	ldr	r2, [r7, #32]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	601a      	str	r2, [r3, #0]
    XMEMCPY(outBlock + sizeof(s0),     &s1, sizeof(s1));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	69fa      	ldr	r2, [r7, #28]
 800438e:	601a      	str	r2, [r3, #0]
    XMEMCPY(outBlock + 2 * sizeof(s0), &s2, sizeof(s2));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3308      	adds	r3, #8
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	601a      	str	r2, [r3, #0]
    XMEMCPY(outBlock + 3 * sizeof(s0), &s3, sizeof(s3));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	330c      	adds	r3, #12
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	601a      	str	r2, [r3, #0]

}
 80043a0:	bf00      	nop
 80043a2:	3738      	adds	r7, #56	@ 0x38
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	08005e70 	.word	0x08005e70
 80043ac:	08006e70 	.word	0x08006e70

080043b0 <wc_AesDecrypt>:

#if !defined(WC_AES_BITSLICED) || defined(WOLFSSL_AES_DIRECT)
/* Software AES - ECB Decrypt */
static WARN_UNUSED_RESULT int wc_AesDecrypt(
    Aes* aes, const byte* inBlock, byte* outBlock)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
    word32 r;

    if (aes == NULL) {
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <wc_AesDecrypt+0x18>
        return BAD_FUNC_ARG;
 80043c2:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 80043c6:	e014      	b.n	80043f2 <wc_AesDecrypt+0x42>
        if (ret < 0)
            return ret;
    }
#endif

    r = aes->rounds >> 1;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	617b      	str	r3, [r7, #20]

    if (r > 7 || r == 0) {
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b07      	cmp	r3, #7
 80043d6:	d802      	bhi.n	80043de <wc_AesDecrypt+0x2e>
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <wc_AesDecrypt+0x34>
        WOLFSSL_ERROR_VERBOSE(KEYUSAGE_E);
        return KEYUSAGE_E;
 80043de:	f06f 03e1 	mvn.w	r3, #225	@ 0xe1
 80043e2:	e006      	b.n	80043f2 <wc_AesDecrypt+0x42>
                        "unsupported keylen = %d", aes->keylen);
    #endif
    } /* else !wc_esp32AesSupportedKeyLen for ESP32 */
#endif

    AesDecrypt_C(aes, inBlock, outBlock, r);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f7fe ff02 	bl	80031f4 <AesDecrypt_C>

    return 0;
 80043f0:	2300      	movs	r3, #0
} /* wc_AesDecrypt[_SW]() */
 80043f2:	4618      	mov	r0, r3
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
	...

080043fc <AesSetKey_C>:
 * @param [in]  key    Block to encrypt.
 * @param [in]  keySz  Number of bytes in key.
 * @param [in]  dir    Direction of crypt: AES_ENCRYPTION or AES_DECRYPTION.
 */
static void AesSetKey_C(Aes* aes, const byte* key, word32 keySz, int dir)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	603b      	str	r3, [r7, #0]
#ifdef WC_C_DYNAMIC_FALLBACK
    word32* rk = aes->key_C_fallback;
#else
    word32* rk = aes->key;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	61fb      	str	r3, [r7, #28]
#endif
    word32 temp;
    unsigned int i = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	61bb      	str	r3, [r7, #24]

    XMEMCPY(rk, key, keySz);
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	69f8      	ldr	r0, [r7, #28]
 8004418:	f000 fcf0 	bl	8004dfc <memcpy>
#if defined(LITTLE_ENDIAN_ORDER) && !defined(WOLFSSL_PIC32MZ_CRYPT) && \
    (!defined(WOLFSSL_ESP32_CRYPT) || defined(NO_WOLFSSL_ESP32_CRYPT_AES))
    /* Always reverse words when using only SW */
    {
        ByteReverseWords(rk, rk, keySz);
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	69f9      	ldr	r1, [r7, #28]
 8004420:	69f8      	ldr	r0, [r7, #28]
 8004422:	f7fd fc8d 	bl	8001d40 <ByteReverseWords>
            /* If we don't need SW fallback, don't need to reverse words. */
        #endif /* NEED_AES_HW_FALLBACK */
    #endif /* WOLFSSL_ESPIDF */
#endif /* LITTLE_ENDIAN_ORDER, etc */

    switch (keySz) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b20      	cmp	r3, #32
 800442a:	f000 80e5 	beq.w	80045f8 <AesSetKey_C+0x1fc>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b20      	cmp	r3, #32
 8004432:	f200 8193 	bhi.w	800475c <AesSetKey_C+0x360>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b10      	cmp	r3, #16
 800443a:	d003      	beq.n	8004444 <AesSetKey_C+0x48>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b18      	cmp	r3, #24
 8004440:	d061      	beq.n	8004506 <AesSetKey_C+0x10a>
 8004442:	e18b      	b.n	800475c <AesSetKey_C+0x360>
        temp = (word32)-1;
        wc_MemZero_Add("wc_AesSetKeyLocal temp", &temp, sizeof(temp));
    #endif
        while (1)
        {
            temp  = rk[3];
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	613b      	str	r3, [r7, #16]
            rk[4] = rk[0] ^
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	681a      	ldr	r2, [r3, #0]
        #ifndef WOLFSSL_AES_SMALL_TABLES
                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	0c1b      	lsrs	r3, r3, #16
 8004452:	b2db      	uxtb	r3, r3
 8004454:	4966      	ldr	r1, [pc, #408]	@ (80045f0 <AesSetKey_C+0x1f4>)
 8004456:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800445a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800445e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
            rk[4] = rk[0] ^
 8004462:	405a      	eors	r2, r3
                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	0a1b      	lsrs	r3, r3, #8
 8004468:	b2db      	uxtb	r3, r3
 800446a:	4961      	ldr	r1, [pc, #388]	@ (80045f0 <AesSetKey_C+0x1f4>)
 800446c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004470:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004474:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 8004478:	405a      	eors	r2, r3
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	4619      	mov	r1, r3
 8004480:	4b5b      	ldr	r3, [pc, #364]	@ (80045f0 <AesSetKey_C+0x1f4>)
 8004482:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004486:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 800448a:	405a      	eors	r2, r3
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	0e1b      	lsrs	r3, r3, #24
 8004490:	b2db      	uxtb	r3, r3
 8004492:	4957      	ldr	r1, [pc, #348]	@ (80045f0 <AesSetKey_C+0x1f4>)
 8004494:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004498:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800449c:	b2db      	uxtb	r3, r3
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800449e:	ea82 0103 	eor.w	r1, r2, r3
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 2)) << 24) ^
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 1)) << 16) ^
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 0)) <<  8) ^
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 3))) ^
        #endif
                rcon[i];
 80044a2:	4a54      	ldr	r2, [pc, #336]	@ (80045f4 <AesSetKey_C+0x1f8>)
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            rk[4] = rk[0] ^
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3310      	adds	r3, #16
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 80044ae:	404a      	eors	r2, r1
            rk[4] = rk[0] ^
 80044b0:	601a      	str	r2, [r3, #0]
            rk[5] = rk[1] ^ rk[4];
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3304      	adds	r3, #4
 80044b6:	6819      	ldr	r1, [r3, #0]
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	3310      	adds	r3, #16
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	3314      	adds	r3, #20
 80044c2:	404a      	eors	r2, r1
 80044c4:	601a      	str	r2, [r3, #0]
            rk[6] = rk[2] ^ rk[5];
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	3308      	adds	r3, #8
 80044ca:	6819      	ldr	r1, [r3, #0]
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	3314      	adds	r3, #20
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	3318      	adds	r3, #24
 80044d6:	404a      	eors	r2, r1
 80044d8:	601a      	str	r2, [r3, #0]
            rk[7] = rk[3] ^ rk[6];
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	330c      	adds	r3, #12
 80044de:	6819      	ldr	r1, [r3, #0]
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	3318      	adds	r3, #24
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	331c      	adds	r3, #28
 80044ea:	404a      	eors	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]
            if (++i == 10)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	3301      	adds	r3, #1
 80044f2:	61bb      	str	r3, [r7, #24]
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	2b0a      	cmp	r3, #10
 80044f8:	d003      	beq.n	8004502 <AesSetKey_C+0x106>
                break;
            rk += 4;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	3310      	adds	r3, #16
 80044fe:	61fb      	str	r3, [r7, #28]
            temp  = rk[3];
 8004500:	e7a0      	b.n	8004444 <AesSetKey_C+0x48>
                break;
 8004502:	bf00      	nop
        }
        break;
 8004504:	e12a      	b.n	800475c <AesSetKey_C+0x360>
        wc_MemZero_Add("wc_AesSetKeyLocal temp", &temp, sizeof(temp));
    #endif
        /* for (;;) here triggers a bug in VC60 SP4 w/ Pro Pack */
        while (1)
        {
            temp = rk[ 5];
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	613b      	str	r3, [r7, #16]
            rk[ 6] = rk[ 0] ^
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	681a      	ldr	r2, [r3, #0]
        #ifndef WOLFSSL_AES_SMALL_TABLES
                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	0c1b      	lsrs	r3, r3, #16
 8004514:	b2db      	uxtb	r3, r3
 8004516:	4936      	ldr	r1, [pc, #216]	@ (80045f0 <AesSetKey_C+0x1f4>)
 8004518:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800451c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004520:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
            rk[ 6] = rk[ 0] ^
 8004524:	405a      	eors	r2, r3
                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	b2db      	uxtb	r3, r3
 800452c:	4930      	ldr	r1, [pc, #192]	@ (80045f0 <AesSetKey_C+0x1f4>)
 800452e:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004532:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004536:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 800453a:	405a      	eors	r2, r3
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	4619      	mov	r1, r3
 8004542:	4b2b      	ldr	r3, [pc, #172]	@ (80045f0 <AesSetKey_C+0x1f4>)
 8004544:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004548:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 800454c:	405a      	eors	r2, r3
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	0e1b      	lsrs	r3, r3, #24
 8004552:	b2db      	uxtb	r3, r3
 8004554:	4926      	ldr	r1, [pc, #152]	@ (80045f0 <AesSetKey_C+0x1f4>)
 8004556:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800455a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800455e:	b2db      	uxtb	r3, r3
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8004560:	ea82 0103 	eor.w	r1, r2, r3
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 2)) << 24) ^
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 1)) << 16) ^
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 0)) <<  8) ^
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 3))) ^
        #endif
                rcon[i];
 8004564:	4a23      	ldr	r2, [pc, #140]	@ (80045f4 <AesSetKey_C+0x1f8>)
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            rk[ 6] = rk[ 0] ^
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	3318      	adds	r3, #24
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8004570:	404a      	eors	r2, r1
            rk[ 6] = rk[ 0] ^
 8004572:	601a      	str	r2, [r3, #0]
            rk[ 7] = rk[ 1] ^ rk[ 6];
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	3304      	adds	r3, #4
 8004578:	6819      	ldr	r1, [r3, #0]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	3318      	adds	r3, #24
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	331c      	adds	r3, #28
 8004584:	404a      	eors	r2, r1
 8004586:	601a      	str	r2, [r3, #0]
            rk[ 8] = rk[ 2] ^ rk[ 7];
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	3308      	adds	r3, #8
 800458c:	6819      	ldr	r1, [r3, #0]
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	331c      	adds	r3, #28
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	3320      	adds	r3, #32
 8004598:	404a      	eors	r2, r1
 800459a:	601a      	str	r2, [r3, #0]
            rk[ 9] = rk[ 3] ^ rk[ 8];
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	330c      	adds	r3, #12
 80045a0:	6819      	ldr	r1, [r3, #0]
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3320      	adds	r3, #32
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	3324      	adds	r3, #36	@ 0x24
 80045ac:	404a      	eors	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]
            if (++i == 8)
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d017      	beq.n	80045ec <AesSetKey_C+0x1f0>
                break;
            rk[10] = rk[ 4] ^ rk[ 9];
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	3310      	adds	r3, #16
 80045c0:	6819      	ldr	r1, [r3, #0]
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3324      	adds	r3, #36	@ 0x24
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	3328      	adds	r3, #40	@ 0x28
 80045cc:	404a      	eors	r2, r1
 80045ce:	601a      	str	r2, [r3, #0]
            rk[11] = rk[ 5] ^ rk[10];
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	3314      	adds	r3, #20
 80045d4:	6819      	ldr	r1, [r3, #0]
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3328      	adds	r3, #40	@ 0x28
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	332c      	adds	r3, #44	@ 0x2c
 80045e0:	404a      	eors	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
            rk += 6;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	3318      	adds	r3, #24
 80045e8:	61fb      	str	r3, [r7, #28]
            temp = rk[ 5];
 80045ea:	e78c      	b.n	8004506 <AesSetKey_C+0x10a>
                break;
 80045ec:	bf00      	nop
        }
        break;
 80045ee:	e0b5      	b.n	800475c <AesSetKey_C+0x360>
 80045f0:	08004e70 	.word	0x08004e70
 80045f4:	08004e48 	.word	0x08004e48
        temp = (word32)-1;
        wc_MemZero_Add("wc_AesSetKeyLocal temp", &temp, sizeof(temp));
    #endif
        while (1)
        {
            temp = rk[ 7];
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	613b      	str	r3, [r7, #16]
            rk[ 8] = rk[ 0] ^
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	681a      	ldr	r2, [r3, #0]
        #ifndef WOLFSSL_AES_SMALL_TABLES
                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	0c1b      	lsrs	r3, r3, #16
 8004606:	b2db      	uxtb	r3, r3
 8004608:	499a      	ldr	r1, [pc, #616]	@ (8004874 <AesSetKey_C+0x478>)
 800460a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800460e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004612:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
            rk[ 8] = rk[ 0] ^
 8004616:	405a      	eors	r2, r3
                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	0a1b      	lsrs	r3, r3, #8
 800461c:	b2db      	uxtb	r3, r3
 800461e:	4995      	ldr	r1, [pc, #596]	@ (8004874 <AesSetKey_C+0x478>)
 8004620:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004624:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004628:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                (GetTable(Te[2], GETBYTE(temp, 2)) & 0xff000000) ^
 800462c:	405a      	eors	r2, r3
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	4619      	mov	r1, r3
 8004634:	4b8f      	ldr	r3, [pc, #572]	@ (8004874 <AesSetKey_C+0x478>)
 8004636:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800463a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
                (GetTable(Te[3], GETBYTE(temp, 1)) & 0x00ff0000) ^
 800463e:	405a      	eors	r2, r3
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	0e1b      	lsrs	r3, r3, #24
 8004644:	b2db      	uxtb	r3, r3
 8004646:	498b      	ldr	r1, [pc, #556]	@ (8004874 <AesSetKey_C+0x478>)
 8004648:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800464c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004650:	b2db      	uxtb	r3, r3
                (GetTable(Te[0], GETBYTE(temp, 0)) & 0x0000ff00) ^
 8004652:	ea82 0103 	eor.w	r1, r2, r3
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 2)) << 24) ^
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 1)) << 16) ^
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 0)) <<  8) ^
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 3))) ^
        #endif
                rcon[i];
 8004656:	4a88      	ldr	r2, [pc, #544]	@ (8004878 <AesSetKey_C+0x47c>)
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            rk[ 8] = rk[ 0] ^
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	3320      	adds	r3, #32
                (GetTable(Te[1], GETBYTE(temp, 3)) & 0x000000ff) ^
 8004662:	404a      	eors	r2, r1
            rk[ 8] = rk[ 0] ^
 8004664:	601a      	str	r2, [r3, #0]
            rk[ 9] = rk[ 1] ^ rk[ 8];
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	3304      	adds	r3, #4
 800466a:	6819      	ldr	r1, [r3, #0]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	3320      	adds	r3, #32
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	3324      	adds	r3, #36	@ 0x24
 8004676:	404a      	eors	r2, r1
 8004678:	601a      	str	r2, [r3, #0]
            rk[10] = rk[ 2] ^ rk[ 9];
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3308      	adds	r3, #8
 800467e:	6819      	ldr	r1, [r3, #0]
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	3324      	adds	r3, #36	@ 0x24
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	3328      	adds	r3, #40	@ 0x28
 800468a:	404a      	eors	r2, r1
 800468c:	601a      	str	r2, [r3, #0]
            rk[11] = rk[ 3] ^ rk[10];
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	330c      	adds	r3, #12
 8004692:	6819      	ldr	r1, [r3, #0]
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	3328      	adds	r3, #40	@ 0x28
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	332c      	adds	r3, #44	@ 0x2c
 800469e:	404a      	eors	r2, r1
 80046a0:	601a      	str	r2, [r3, #0]
            if (++i == 7)
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	3301      	adds	r3, #1
 80046a6:	61bb      	str	r3, [r7, #24]
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2b07      	cmp	r3, #7
 80046ac:	d054      	beq.n	8004758 <AesSetKey_C+0x35c>
                break;
            temp = rk[11];
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b2:	613b      	str	r3, [r7, #16]
            rk[12] = rk[ 4] ^
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	3310      	adds	r3, #16
 80046b8:	681a      	ldr	r2, [r3, #0]
        #ifndef WOLFSSL_AES_SMALL_TABLES
                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	0e1b      	lsrs	r3, r3, #24
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	496c      	ldr	r1, [pc, #432]	@ (8004874 <AesSetKey_C+0x478>)
 80046c2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80046c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046ca:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
            rk[12] = rk[ 4] ^
 80046ce:	405a      	eors	r2, r3
                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	0c1b      	lsrs	r3, r3, #16
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	4967      	ldr	r1, [pc, #412]	@ (8004874 <AesSetKey_C+0x478>)
 80046d8:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80046dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80046e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
                (GetTable(Te[2], GETBYTE(temp, 3)) & 0xff000000) ^
 80046e4:	405a      	eors	r2, r3
                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	0a1b      	lsrs	r3, r3, #8
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	4619      	mov	r1, r3
 80046ee:	4b61      	ldr	r3, [pc, #388]	@ (8004874 <AesSetKey_C+0x478>)
 80046f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80046f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
                (GetTable(Te[3], GETBYTE(temp, 2)) & 0x00ff0000) ^
 80046f8:	ea82 0103 	eor.w	r1, r2, r3
                (GetTable(Te[1], GETBYTE(temp, 0)) & 0x000000ff);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	4a5c      	ldr	r2, [pc, #368]	@ (8004874 <AesSetKey_C+0x478>)
 8004702:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470a:	b2da      	uxtb	r2, r3
            rk[12] = rk[ 4] ^
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	3330      	adds	r3, #48	@ 0x30
                (GetTable(Te[0], GETBYTE(temp, 1)) & 0x0000ff00) ^
 8004710:	404a      	eors	r2, r1
            rk[12] = rk[ 4] ^
 8004712:	601a      	str	r2, [r3, #0]
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 3)) << 24) ^
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 2)) << 16) ^
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 1)) <<  8) ^
                ((word32)GetTable8(Tsbox, GETBYTE(temp, 0)));
        #endif
            rk[13] = rk[ 5] ^ rk[12];
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	3314      	adds	r3, #20
 8004718:	6819      	ldr	r1, [r3, #0]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	3330      	adds	r3, #48	@ 0x30
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	3334      	adds	r3, #52	@ 0x34
 8004724:	404a      	eors	r2, r1
 8004726:	601a      	str	r2, [r3, #0]
            rk[14] = rk[ 6] ^ rk[13];
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	3318      	adds	r3, #24
 800472c:	6819      	ldr	r1, [r3, #0]
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	3334      	adds	r3, #52	@ 0x34
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	3338      	adds	r3, #56	@ 0x38
 8004738:	404a      	eors	r2, r1
 800473a:	601a      	str	r2, [r3, #0]
            rk[15] = rk[ 7] ^ rk[14];
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	331c      	adds	r3, #28
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	3338      	adds	r3, #56	@ 0x38
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	333c      	adds	r3, #60	@ 0x3c
 800474c:	404a      	eors	r2, r1
 800474e:	601a      	str	r2, [r3, #0]

            rk += 8;
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	3320      	adds	r3, #32
 8004754:	61fb      	str	r3, [r7, #28]
            temp = rk[ 7];
 8004756:	e74f      	b.n	80045f8 <AesSetKey_C+0x1fc>
                break;
 8004758:	bf00      	nop
        }
        break;
 800475a:	bf00      	nop
#endif /* 256 */
    } /* switch */
    ForceZero(&temp, sizeof(temp));
 800475c:	f107 0310 	add.w	r3, r7, #16
 8004760:	2104      	movs	r1, #4
 8004762:	4618      	mov	r0, r3
 8004764:	f7fd fb91 	bl	8001e8a <ForceZero>

#if defined(HAVE_AES_DECRYPT)
    if (dir == AES_DECRYPTION) {
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	f040 819d 	bne.w	8004aaa <AesSetKey_C+0x6ae>
        unsigned int j;

#ifdef WC_C_DYNAMIC_FALLBACK
        rk = aes->key_C_fallback;
#else
        rk = aes->key;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	61fb      	str	r3, [r7, #28]
#endif

        /* invert the order of the round keys: */
        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 8004774:	2300      	movs	r3, #0
 8004776:	61bb      	str	r3, [r7, #24]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e069      	b.n	8004858 <AesSetKey_C+0x45c>
            temp = rk[i    ]; rk[i    ] = rk[j    ]; rk[j    ] = temp;
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	4413      	add	r3, r2
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	69fa      	ldr	r2, [r7, #28]
 8004796:	441a      	add	r2, r3
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	69f9      	ldr	r1, [r7, #28]
 800479e:	440b      	add	r3, r1
 80047a0:	6812      	ldr	r2, [r2, #0]
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	4413      	add	r3, r2
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	601a      	str	r2, [r3, #0]
            temp = rk[i + 1]; rk[i + 1] = rk[j + 1]; rk[j + 1] = temp;
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	3301      	adds	r3, #1
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	69fa      	ldr	r2, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	3301      	adds	r3, #1
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	441a      	add	r2, r3
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	3301      	adds	r3, #1
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	69f9      	ldr	r1, [r7, #28]
 80047d0:	440b      	add	r3, r1
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	3301      	adds	r3, #1
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	69fa      	ldr	r2, [r7, #28]
 80047de:	4413      	add	r3, r2
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	601a      	str	r2, [r3, #0]
            temp = rk[i + 2]; rk[i + 2] = rk[j + 2]; rk[j + 2] = temp;
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	3302      	adds	r3, #2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	613b      	str	r3, [r7, #16]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	3302      	adds	r3, #2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	441a      	add	r2, r3
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	3302      	adds	r3, #2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	69f9      	ldr	r1, [r7, #28]
 8004804:	440b      	add	r3, r1
 8004806:	6812      	ldr	r2, [r2, #0]
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	3302      	adds	r3, #2
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	69fa      	ldr	r2, [r7, #28]
 8004812:	4413      	add	r3, r2
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	601a      	str	r2, [r3, #0]
            temp = rk[i + 3]; rk[i + 3] = rk[j + 3]; rk[j + 3] = temp;
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	3303      	adds	r3, #3
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	69fa      	ldr	r2, [r7, #28]
 8004820:	4413      	add	r3, r2
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	3303      	adds	r3, #3
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	69fa      	ldr	r2, [r7, #28]
 800482e:	441a      	add	r2, r3
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	3303      	adds	r3, #3
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	69f9      	ldr	r1, [r7, #28]
 8004838:	440b      	add	r3, r1
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	3303      	adds	r3, #3
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	69fa      	ldr	r2, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	601a      	str	r2, [r3, #0]
        for (i = 0, j = 4* aes->rounds; i < j; i += 4, j -= 4) {
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	3304      	adds	r3, #4
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	3b04      	subs	r3, #4
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	429a      	cmp	r2, r3
 800485e:	d391      	bcc.n	8004784 <AesSetKey_C+0x388>
        }
        ForceZero(&temp, sizeof(temp));
 8004860:	f107 0310 	add.w	r3, r7, #16
 8004864:	2104      	movs	r1, #4
 8004866:	4618      	mov	r0, r3
 8004868:	f7fd fb0f 	bl	8001e8a <ForceZero>
    #if !defined(WOLFSSL_AES_SMALL_TABLES)
        /* apply the inverse MixColumn transform to all round keys but the
           first and the last: */
        for (i = 1; i < aes->rounds; i++) {
 800486c:	2301      	movs	r3, #1
 800486e:	61bb      	str	r3, [r7, #24]
 8004870:	e114      	b.n	8004a9c <AesSetKey_C+0x6a0>
 8004872:	bf00      	nop
 8004874:	08004e70 	.word	0x08004e70
 8004878:	08004e48 	.word	0x08004e48
            rk += 4;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	3310      	adds	r3, #16
 8004880:	61fb      	str	r3, [r7, #28]
            rk[0] =
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	0e1b      	lsrs	r3, r3, #24
 8004888:	b2db      	uxtb	r3, r3
 800488a:	4a8a      	ldr	r2, [pc, #552]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 800488c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	4a88      	ldr	r2, [pc, #544]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 8004898:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	0c1b      	lsrs	r3, r3, #16
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	4983      	ldr	r1, [pc, #524]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 80048a6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80048aa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	4981      	ldr	r1, [pc, #516]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 80048b2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80048b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[0], 3)) & 0xff) ^
 80048ba:	405a      	eors	r2, r3
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	0a1b      	lsrs	r3, r3, #8
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	497b      	ldr	r1, [pc, #492]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 80048c6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80048ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	4979      	ldr	r1, [pc, #484]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 80048d2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80048d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[0], 2)) & 0xff) ^
 80048da:	405a      	eors	r2, r3
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[0], 0)) & 0xff);
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	4974      	ldr	r1, [pc, #464]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 80048e4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80048e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	4972      	ldr	r1, [pc, #456]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 80048f0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80048f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[0], 1)) & 0xff) ^
 80048f8:	405a      	eors	r2, r3
            rk[0] =
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	601a      	str	r2, [r3, #0]
            rk[1] =
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	3304      	adds	r3, #4
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	0e1b      	lsrs	r3, r3, #24
 8004906:	b2db      	uxtb	r3, r3
 8004908:	4a6a      	ldr	r2, [pc, #424]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 800490a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800490e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	4a68      	ldr	r2, [pc, #416]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 8004916:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	3304      	adds	r3, #4
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	0c1b      	lsrs	r3, r3, #16
 8004922:	b2db      	uxtb	r3, r3
 8004924:	4963      	ldr	r1, [pc, #396]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 8004926:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800492a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	4961      	ldr	r1, [pc, #388]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 8004932:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004936:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[1], 3)) & 0xff) ^
 800493a:	405a      	eors	r2, r3
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	3304      	adds	r3, #4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	0a1b      	lsrs	r3, r3, #8
 8004944:	b2db      	uxtb	r3, r3
 8004946:	495b      	ldr	r1, [pc, #364]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 8004948:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800494c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004950:	b2db      	uxtb	r3, r3
 8004952:	4959      	ldr	r1, [pc, #356]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 8004954:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004958:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[1], 2)) & 0xff) ^
 800495c:	ea82 0103 	eor.w	r1, r2, r3
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[1], 0)) & 0xff);
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	3304      	adds	r3, #4
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	4a52      	ldr	r2, [pc, #328]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 800496a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800496e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	4a50      	ldr	r2, [pc, #320]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 8004976:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800497a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            rk[1] =
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	3304      	adds	r3, #4
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[1], 1)) & 0xff) ^
 8004982:	404a      	eors	r2, r1
            rk[1] =
 8004984:	601a      	str	r2, [r3, #0]
            rk[2] =
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3308      	adds	r3, #8
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	0e1b      	lsrs	r3, r3, #24
 800498e:	b2db      	uxtb	r3, r3
 8004990:	4a48      	ldr	r2, [pc, #288]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 8004992:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	4a46      	ldr	r2, [pc, #280]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 800499e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	3308      	adds	r3, #8
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	4941      	ldr	r1, [pc, #260]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 80049ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	493f      	ldr	r1, [pc, #252]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 80049ba:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[2], 3)) & 0xff) ^
 80049c2:	405a      	eors	r2, r3
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	3308      	adds	r3, #8
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	0a1b      	lsrs	r3, r3, #8
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	4939      	ldr	r1, [pc, #228]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 80049d0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	4937      	ldr	r1, [pc, #220]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 80049dc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80049e0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[2], 2)) & 0xff) ^
 80049e4:	ea82 0103 	eor.w	r1, r2, r3
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[2], 0)) & 0xff);
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	3308      	adds	r3, #8
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	4a30      	ldr	r2, [pc, #192]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 80049f2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80049f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	4a2e      	ldr	r2, [pc, #184]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 80049fe:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004a02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            rk[2] =
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	3308      	adds	r3, #8
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[2], 1)) & 0xff) ^
 8004a0a:	404a      	eors	r2, r1
            rk[2] =
 8004a0c:	601a      	str	r2, [r3, #0]
            rk[3] =
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	330c      	adds	r3, #12
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	4a26      	ldr	r2, [pc, #152]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 8004a1a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	4a24      	ldr	r2, [pc, #144]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 8004a26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	0c1b      	lsrs	r3, r3, #16
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	491f      	ldr	r1, [pc, #124]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 8004a36:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	491d      	ldr	r1, [pc, #116]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 8004a42:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a46:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                GetTable(Td[0], GetTable(Te[1], GETBYTE(rk[3], 3)) & 0xff) ^
 8004a4a:	405a      	eors	r2, r3
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	0a1b      	lsrs	r3, r3, #8
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	4917      	ldr	r1, [pc, #92]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 8004a58:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a5c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	4915      	ldr	r1, [pc, #84]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 8004a64:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8004a68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
                GetTable(Td[1], GetTable(Te[1], GETBYTE(rk[3], 2)) & 0xff) ^
 8004a6c:	ea82 0103 	eor.w	r1, r2, r3
                GetTable(Td[3], GetTable(Te[1], GETBYTE(rk[3], 0)) & 0xff);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	330c      	adds	r3, #12
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab4 <AesSetKey_C+0x6b8>)
 8004a7a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004a7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	4a0c      	ldr	r2, [pc, #48]	@ (8004ab8 <AesSetKey_C+0x6bc>)
 8004a86:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8004a8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
            rk[3] =
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	330c      	adds	r3, #12
                GetTable(Td[2], GetTable(Te[1], GETBYTE(rk[3], 1)) & 0xff) ^
 8004a92:	404a      	eors	r2, r1
            rk[3] =
 8004a94:	601a      	str	r2, [r3, #0]
        for (i = 1; i < aes->rounds; i++) {
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	f4ff aee9 	bcc.w	800487c <AesSetKey_C+0x480>
#ifdef WOLFSSL_CHECK_MEM_ZERO
    wc_MemZero_Check(&temp, sizeof(temp));
#else
    (void)temp;
#endif
}
 8004aaa:	bf00      	nop
 8004aac:	3720      	adds	r7, #32
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	08004e70 	.word	0x08004e70
 8004ab8:	08005e70 	.word	0x08005e70

08004abc <wc_AesSetKeyLocal>:
#ifndef WOLFSSL_RISCV_ASM
    /* Software AES - SetKey */
    static WARN_UNUSED_RESULT int wc_AesSetKeyLocal(
        Aes* aes, const byte* userKey, word32 keylen, const byte* iv, int dir,
        int checkKeyLen)
    {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
    #ifdef WOLFSSL_IMX6_CAAM_BLOB
        byte   local[32];
        word32 localSz = 32;
    #endif

        if (aes == NULL)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <wc_AesSetKeyLocal+0x1a>
            return BAD_FUNC_ARG;
 8004ad0:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 8004ad4:	e059      	b.n	8004b8a <wc_AesSetKeyLocal+0xce>
        ret = wc_debug_CipherLifecycleCheck(aes->CipherLifecycleTag, 0);
        if (ret < 0)
            return ret;
#endif

        switch (keylen) {
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3b10      	subs	r3, #16
 8004ada:	2b10      	cmp	r3, #16
 8004adc:	bf8c      	ite	hi
 8004ade:	2201      	movhi	r2, #1
 8004ae0:	2200      	movls	r2, #0
 8004ae2:	b2d2      	uxtb	r2, r2
 8004ae4:	2a00      	cmp	r2, #0
 8004ae6:	d10b      	bne.n	8004b00 <wc_AesSetKeyLocal+0x44>
 8004ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8004b94 <wc_AesSetKeyLocal+0xd8>)
 8004aea:	fa22 f303 	lsr.w	r3, r2, r3
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	bf14      	ite	ne
 8004af6:	2301      	movne	r3, #1
 8004af8:	2300      	moveq	r3, #0
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <wc_AesSetKeyLocal+0x4a>
        defined(WOLFSSL_AES_256)
        case 32:
    #endif
            break;
        default:
            return BAD_FUNC_ARG;
 8004b00:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 8004b04:	e041      	b.n	8004b8a <wc_AesSetKeyLocal+0xce>
            break;
 8004b06:	bf00      	nop
            }
            XMEMCPY(aes->devKey, userKey, keylen);
        }
    #endif

        if (checkKeyLen) {
 8004b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00b      	beq.n	8004b26 <wc_AesSetKeyLocal+0x6a>
            if (keylen != 16 && keylen != 24 && keylen != 32) {
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b10      	cmp	r3, #16
 8004b12:	d008      	beq.n	8004b26 <wc_AesSetKeyLocal+0x6a>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2b18      	cmp	r3, #24
 8004b18:	d005      	beq.n	8004b26 <wc_AesSetKeyLocal+0x6a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d002      	beq.n	8004b26 <wc_AesSetKeyLocal+0x6a>
                return BAD_FUNC_ARG;
 8004b20:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 8004b24:	e031      	b.n	8004b8a <wc_AesSetKeyLocal+0xce>
    #if defined(WOLFSSL_AES_CFB) || defined(WOLFSSL_AES_COUNTER) || \
        defined(WOLFSSL_AES_OFB)
        aes->left = 0;
    #endif

        aes->keylen = (int)keylen;
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
        aes->rounds = (keylen/4) + 6;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	089b      	lsrs	r3, r3, #2
 8004b32:	1d9a      	adds	r2, r3, #6
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        ret = wc_AesSetIV(aes, iv);
 8004b3a:	6839      	ldr	r1, [r7, #0]
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f000 f84d 	bl	8004bdc <wc_AesSetIV>
 8004b42:	6178      	str	r0, [r7, #20]
        if (ret != 0)
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <wc_AesSetKeyLocal+0x92>
            return ret;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	e01d      	b.n	8004b8a <wc_AesSetKeyLocal+0xce>
            aes->init = 0;
        }
        (void)dir;
    #endif

        if (keylen > sizeof(aes->key)) {
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2bf0      	cmp	r3, #240	@ 0xf0
 8004b52:	d902      	bls.n	8004b5a <wc_AesSetKeyLocal+0x9e>
            return BAD_FUNC_ARG;
 8004b54:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 8004b58:	e017      	b.n	8004b8a <wc_AesSetKeyLocal+0xce>
            }
            return ret;
        }
#endif

        XMEMCPY(aes->key, userKey, keylen);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 f94b 	bl	8004dfc <memcpy>
    #if defined(LITTLE_ENDIAN_ORDER) && !defined(WOLFSSL_PIC32MZ_CRYPT) && \
        (!defined(WOLFSSL_ESP32_CRYPT) || \
          defined(NO_WOLFSSL_ESP32_CRYPT_AES))

        /* software */
        ByteReverseWords(aes->key, aes->key, keylen);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68f9      	ldr	r1, [r7, #12]
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fd f8e7 	bl	8001d40 <ByteReverseWords>
        }
    #endif
#endif /* !WC_AES_BITSLICED */

#ifdef NEED_AES_TABLES
        AesSetKey_C(aes, userKey, keylen, dir);
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff fc3f 	bl	80043fc <AesSetKey_C>
        if (WOLFSSL_SCE_GSCE_HANDLE.p_cfg->endian_flag == CRYPTO_WORD_ENDIAN_BIG) {
            ByteReverseWords(aes->key, aes->key, 32);
        }
#endif

        ret = wc_AesSetIV(aes, iv);
 8004b7e:	6839      	ldr	r1, [r7, #0]
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f82b 	bl	8004bdc <wc_AesSetIV>
 8004b86:	6178      	str	r0, [r7, #20]
        aes->ctx.cfd = -1;
    #endif
    #ifdef WOLFSSL_IMX6_CAAM_BLOB
        ForceZero(local, sizeof(local));
    #endif
        return ret;
 8004b88:	697b      	ldr	r3, [r7, #20]
    } /* wc_AesSetKeyLocal */
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	00010101 	.word	0x00010101

08004b98 <wc_AesSetKey>:

    int wc_AesSetKey(Aes* aes, const byte* userKey, word32 keylen,
            const byte* iv, int dir)
    {
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af02      	add	r7, sp, #8
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
        if (aes == NULL) {
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d102      	bne.n	8004bb2 <wc_AesSetKey+0x1a>
            return BAD_FUNC_ARG;
 8004bac:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 8004bb0:	e010      	b.n	8004bd4 <wc_AesSetKey+0x3c>
        }
        if (keylen > sizeof(aes->key)) {
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2bf0      	cmp	r3, #240	@ 0xf0
 8004bb6:	d902      	bls.n	8004bbe <wc_AesSetKey+0x26>
            return BAD_FUNC_ARG;
 8004bb8:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 8004bbc:	e00a      	b.n	8004bd4 <wc_AesSetKey+0x3c>
                           keylen);
        #endif
        }
    #endif /* WOLFSSL_ESPIDF && NEED_AES_HW_FALLBACK */

        return wc_AesSetKeyLocal(aes, userKey, keylen, iv, dir, 1);
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	9301      	str	r3, [sp, #4]
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	9300      	str	r3, [sp, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	68b9      	ldr	r1, [r7, #8]
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f7ff ff75 	bl	8004abc <wc_AesSetKeyLocal>
 8004bd2:	4603      	mov	r3, r0

    } /* wc_AesSetKey() */
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <wc_AesSetIV>:
#endif /* wc_AesSetKey block */


/* wc_AesSetIV is shared between software and hardware */
int wc_AesSetIV(Aes* aes, const byte* iv)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
    if (aes == NULL)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <wc_AesSetIV+0x16>
        return BAD_FUNC_ARG;
 8004bec:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 8004bf0:	e012      	b.n	8004c18 <wc_AesSetIV+0x3c>
        if (ret < 0)
            return ret;
    }
#endif

    if (iv)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d007      	beq.n	8004c08 <wc_AesSetIV+0x2c>
        XMEMCPY(aes->reg, iv, AES_BLOCK_SIZE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	33f8      	adds	r3, #248	@ 0xf8
 8004bfc:	2210      	movs	r2, #16
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 f8fb 	bl	8004dfc <memcpy>
 8004c06:	e006      	b.n	8004c16 <wc_AesSetIV+0x3a>
    else
        XMEMSET(aes->reg,  0, AES_BLOCK_SIZE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	33f8      	adds	r3, #248	@ 0xf8
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	2100      	movs	r1, #0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f8c7 	bl	8004da4 <memset>
    defined(WOLFSSL_AES_OFB) || defined(WOLFSSL_AES_XTS)
    /* Clear any unused bytes from last cipher op. */
    aes->left = 0;
#endif

    return 0;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <wc_AesCbcEncrypt>:

#ifdef NEED_SW_AESCBC
    /* Software AES - CBC Encrypt */

int wc_AesCbcEncrypt(Aes* aes, byte* out, const byte* in, word32 sz)
    {
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
 8004c2c:	603b      	str	r3, [r7, #0]
        word32 blocks;
        int ret;

        if (aes == NULL || out == NULL || in == NULL) {
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <wc_AesCbcEncrypt+0x20>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <wc_AesCbcEncrypt+0x20>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <wc_AesCbcEncrypt+0x26>
            return BAD_FUNC_ARG;
 8004c40:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 8004c44:	e033      	b.n	8004cae <wc_AesCbcEncrypt+0x8e>
        }

        if (sz == 0) {
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d101      	bne.n	8004c50 <wc_AesCbcEncrypt+0x30>
            return 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	e02e      	b.n	8004cae <wc_AesCbcEncrypt+0x8e>
        }

        blocks = sz / AES_BLOCK_SIZE;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	617b      	str	r3, [r7, #20]
            }
        }
        else
    #endif
        {
            ret = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
            while (blocks--) {
 8004c5a:	e020      	b.n	8004c9e <wc_AesCbcEncrypt+0x7e>
                xorbuf((byte*)aes->reg, in, AES_BLOCK_SIZE);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	33f8      	adds	r3, #248	@ 0xf8
 8004c60:	2210      	movs	r2, #16
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fd f8b6 	bl	8001dd6 <xorbuf>
                ret = wc_AesEncrypt(aes, (byte*)aes->reg, (byte*)aes->reg);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f103 01f8 	add.w	r1, r3, #248	@ 0xf8
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	33f8      	adds	r3, #248	@ 0xf8
 8004c74:	461a      	mov	r2, r3
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f7fe fa4c 	bl	8003114 <wc_AesEncrypt>
 8004c7c:	6138      	str	r0, [r7, #16]
                if (ret != 0)
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d112      	bne.n	8004caa <wc_AesCbcEncrypt+0x8a>
                    break;
                XMEMCPY(out, aes->reg, AES_BLOCK_SIZE);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	33f8      	adds	r3, #248	@ 0xf8
 8004c88:	2210      	movs	r2, #16
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	68b8      	ldr	r0, [r7, #8]
 8004c8e:	f000 f8b5 	bl	8004dfc <memcpy>

                out += AES_BLOCK_SIZE;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	3310      	adds	r3, #16
 8004c96:	60bb      	str	r3, [r7, #8]
                in  += AES_BLOCK_SIZE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	3310      	adds	r3, #16
 8004c9c:	607b      	str	r3, [r7, #4]
            while (blocks--) {
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	1e5a      	subs	r2, r3, #1
 8004ca2:	617a      	str	r2, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1d9      	bne.n	8004c5c <wc_AesCbcEncrypt+0x3c>
 8004ca8:	e000      	b.n	8004cac <wc_AesCbcEncrypt+0x8c>
                    break;
 8004caa:	bf00      	nop

    #ifdef WOLFSSL_AESNI
        VECTOR_REGISTERS_POP;
    #endif

        return ret;
 8004cac:	693b      	ldr	r3, [r7, #16]
    } /* wc_AesCbcEncrypt */
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <wc_AesCbcDecrypt>:

#ifdef HAVE_AES_DECRYPT
    /* Software AES - CBC Decrypt */
    int wc_AesCbcDecrypt(Aes* aes, byte* out, const byte* in, word32 sz)
    {
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b086      	sub	sp, #24
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
 8004cc2:	603b      	str	r3, [r7, #0]
        word32 blocks;
        int ret;

        if (aes == NULL || out == NULL || in == NULL) {
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d005      	beq.n	8004cd6 <wc_AesCbcDecrypt+0x20>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <wc_AesCbcDecrypt+0x20>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d102      	bne.n	8004cdc <wc_AesCbcDecrypt+0x26>
            return BAD_FUNC_ARG;
 8004cd6:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 8004cda:	e042      	b.n	8004d62 <wc_AesCbcDecrypt+0xac>
        }

        if (sz == 0) {
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <wc_AesCbcDecrypt+0x30>
            return 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	e03d      	b.n	8004d62 <wc_AesCbcDecrypt+0xac>
                          "unsupported keylen = %d", aes->keylen);
        #endif
        }
    #endif

        blocks = sz / AES_BLOCK_SIZE;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	617b      	str	r3, [r7, #20]
        if (sz % AES_BLOCK_SIZE) {
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <wc_AesCbcDecrypt+0x46>
#ifdef WOLFSSL_AES_CBC_LENGTH_CHECKS
            return BAD_LENGTH_E;
#else
            return BAD_FUNC_ARG;
 8004cf6:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 8004cfa:	e032      	b.n	8004d62 <wc_AesCbcDecrypt+0xac>
            ret = 0;
        }
        else
    #endif
        {
            ret = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]

                    blocks = 0;
                }
            }
#else
            while (blocks--) {
 8004d00:	e029      	b.n	8004d56 <wc_AesCbcDecrypt+0xa0>
                XMEMCPY(aes->tmp, in, AES_BLOCK_SIZE);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004d08:	2210      	movs	r2, #16
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f875 	bl	8004dfc <memcpy>
                ret = wc_AesDecrypt(aes, in, out);
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f7ff fb4a 	bl	80043b0 <wc_AesDecrypt>
 8004d1c:	6138      	str	r0, [r7, #16]
                if (ret != 0)
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <wc_AesCbcDecrypt+0x72>
                    return ret;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	e01c      	b.n	8004d62 <wc_AesCbcDecrypt+0xac>
                xorbuf(out, (byte*)aes->reg, AES_BLOCK_SIZE);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	33f8      	adds	r3, #248	@ 0xf8
 8004d2c:	2210      	movs	r2, #16
 8004d2e:	4619      	mov	r1, r3
 8004d30:	68b8      	ldr	r0, [r7, #8]
 8004d32:	f7fd f850 	bl	8001dd6 <xorbuf>
                /* store iv for next call */
                XMEMCPY(aes->reg, aes->tmp, AES_BLOCK_SIZE);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f103 00f8 	add.w	r0, r3, #248	@ 0xf8
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004d42:	2210      	movs	r2, #16
 8004d44:	4619      	mov	r1, r3
 8004d46:	f000 f859 	bl	8004dfc <memcpy>

                out += AES_BLOCK_SIZE;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3310      	adds	r3, #16
 8004d4e:	60bb      	str	r3, [r7, #8]
                in  += AES_BLOCK_SIZE;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3310      	adds	r3, #16
 8004d54:	607b      	str	r3, [r7, #4]
            while (blocks--) {
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	1e5a      	subs	r2, r3, #1
 8004d5a:	617a      	str	r2, [r7, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1d0      	bne.n	8004d02 <wc_AesCbcDecrypt+0x4c>
#endif
        }

        VECTOR_REGISTERS_POP;

        return ret;
 8004d60:	693b      	ldr	r3, [r7, #16]
    }
 8004d62:	4618      	mov	r0, r3
 8004d64:	3718      	adds	r7, #24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <wc_AesInit>:
#endif /* HAVE_AESCCM */


/* Initialize Aes for use with async hardware */
int wc_AesInit(Aes* aes, void* heap, int devId)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b087      	sub	sp, #28
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	607a      	str	r2, [r7, #4]
    int ret = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	617b      	str	r3, [r7, #20]

    if (aes == NULL)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d102      	bne.n	8004d86 <wc_AesInit+0x1c>
        return BAD_FUNC_ARG;
 8004d80:	f06f 03ac 	mvn.w	r3, #172	@ 0xac
 8004d84:	e008      	b.n	8004d98 <wc_AesInit+0x2e>

    aes->heap = heap;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
    aes->rounds = 0;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
#ifdef WC_DEBUG_CIPHER_LIFECYCLE
    if (ret == 0)
        ret = wc_debug_CipherLifecycleInit(&aes->CipherLifecycleTag, aes->heap);
#endif

    return ret;
 8004d96:	697b      	ldr	r3, [r7, #20]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <memset>:
 8004da4:	4402      	add	r2, r0
 8004da6:	4603      	mov	r3, r0
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d100      	bne.n	8004dae <memset+0xa>
 8004dac:	4770      	bx	lr
 8004dae:	f803 1b01 	strb.w	r1, [r3], #1
 8004db2:	e7f9      	b.n	8004da8 <memset+0x4>

08004db4 <__libc_init_array>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	4d0d      	ldr	r5, [pc, #52]	@ (8004dec <__libc_init_array+0x38>)
 8004db8:	4c0d      	ldr	r4, [pc, #52]	@ (8004df0 <__libc_init_array+0x3c>)
 8004dba:	1b64      	subs	r4, r4, r5
 8004dbc:	10a4      	asrs	r4, r4, #2
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	42a6      	cmp	r6, r4
 8004dc2:	d109      	bne.n	8004dd8 <__libc_init_array+0x24>
 8004dc4:	4d0b      	ldr	r5, [pc, #44]	@ (8004df4 <__libc_init_array+0x40>)
 8004dc6:	4c0c      	ldr	r4, [pc, #48]	@ (8004df8 <__libc_init_array+0x44>)
 8004dc8:	f000 f826 	bl	8004e18 <_init>
 8004dcc:	1b64      	subs	r4, r4, r5
 8004dce:	10a4      	asrs	r4, r4, #2
 8004dd0:	2600      	movs	r6, #0
 8004dd2:	42a6      	cmp	r6, r4
 8004dd4:	d105      	bne.n	8004de2 <__libc_init_array+0x2e>
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}
 8004dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ddc:	4798      	blx	r3
 8004dde:	3601      	adds	r6, #1
 8004de0:	e7ee      	b.n	8004dc0 <__libc_init_array+0xc>
 8004de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de6:	4798      	blx	r3
 8004de8:	3601      	adds	r6, #1
 8004dea:	e7f2      	b.n	8004dd2 <__libc_init_array+0x1e>
 8004dec:	08006f78 	.word	0x08006f78
 8004df0:	08006f78 	.word	0x08006f78
 8004df4:	08006f78 	.word	0x08006f78
 8004df8:	08006f7c 	.word	0x08006f7c

08004dfc <memcpy>:
 8004dfc:	440a      	add	r2, r1
 8004dfe:	4291      	cmp	r1, r2
 8004e00:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e04:	d100      	bne.n	8004e08 <memcpy+0xc>
 8004e06:	4770      	bx	lr
 8004e08:	b510      	push	{r4, lr}
 8004e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e12:	4291      	cmp	r1, r2
 8004e14:	d1f9      	bne.n	8004e0a <memcpy+0xe>
 8004e16:	bd10      	pop	{r4, pc}

08004e18 <_init>:
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1a:	bf00      	nop
 8004e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1e:	bc08      	pop	{r3}
 8004e20:	469e      	mov	lr, r3
 8004e22:	4770      	bx	lr

08004e24 <_fini>:
 8004e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e26:	bf00      	nop
 8004e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e2a:	bc08      	pop	{r3}
 8004e2c:	469e      	mov	lr, r3
 8004e2e:	4770      	bx	lr
